#!/usr/bin/env dart

import 'dart:io';
import 'dart:convert';

// Simple logging for scripts
void logInfo(String message) {
  stdout.writeln('‚úÖ $message');
}

void logError(String message) {
  stderr.writeln('‚ùå $message');
}

void logBuild(String message) {
  stdout.writeln('üèóÔ∏è  $message');
}

void logInstructions(String message) {
  stdout.writeln('üì± $message');
}

void logSuccess(String message) {
  stdout.writeln('üéâ $message');
}

/// City configuration class to match the JSON schema
class CityConfig {
  final String city;
  final String domain;
  final double latitude;
  final double longitude;
  final String downloadLink;
  final String? termsLink;
  final String androidPackage;
  final String iosPackage;
  final String? whatsapp;
  final String? chatBotURL;
  final List<int> products;
  final List<int> vehicleTypes;
  final String mainLogo;
  final String logoMenu;
  final Map<String, dynamic> balance;
  final String? parkingRulesText;
  final Map<String, dynamic> parkingRules;
  final Map<String, dynamic> purchase;
  final List<Map<String, dynamic>> faq;

  CityConfig({
    required this.city,
    required this.domain,
    required this.latitude,
    required this.longitude,
    required this.downloadLink,
    this.termsLink,
    required this.androidPackage,
    required this.iosPackage,
    this.whatsapp,
    this.chatBotURL,
    required this.products,
    required this.vehicleTypes,
    required this.mainLogo,
    required this.logoMenu,
    required this.balance,
    this.parkingRulesText,
    required this.parkingRules,
    required this.purchase,
    required this.faq,
  });

  factory CityConfig.fromJson(Map<String, dynamic> json) {
    return CityConfig(
      city: json['city'],
      domain: json['domain'],
      latitude: json['latitude'].toDouble(),
      longitude: json['longitude'].toDouble(),
      downloadLink: json['downloadLink'],
      termsLink: json['termsLink'],
      androidPackage: json['androidPackage'],
      iosPackage: json['iosPackage'],
      whatsapp: json['whatsapp'],
      chatBotURL: json['chatBotURL'],
      products: List<int>.from(json['products']),
      vehicleTypes: List<int>.from(json['vehicleTypes']),
      mainLogo: json['mainLogo'],
      logoMenu: json['logoMenu'],
      balance: json['balance'],
      parkingRulesText: json['parkingRulesText'],
      parkingRules: json['parkingRules'],
      purchase: json['purchase'],
      faq: List<Map<String, dynamic>>.from(json['faq']),
    );
  }
}

/// Available cities mapping
const Map<String, String> cityMappings = {
  'demo': 'Main',
  'patos': 'PatosDeMinas',
  'janauba': 'Janauba',
  'lafaiete': 'ConselheiroLafaiete',
  'capao': 'CapaoBonito',
  'monlevade': 'JoaoMonlevade',
  'itarare': 'Itarare',
  'passos': 'Passos',
  'neves': 'RibeiraoDasNeves',
  'igarape': 'Igarape',
  'ouropreto': 'OuroPreto',
};

/// Build script for city-specific Flutter flavors
class CityBuildScript {
  late final String cityKey;
  late final String cityName;
  late final String displayName;
  late final CityConfig config;

  CityBuildScript(this.cityKey, this.displayName);

  /// Load city configuration
  Future<void> loadCityConfig() async {
    if (!cityMappings.containsKey(cityKey)) {
      throw Exception('City not found: $cityKey. Available cities: ${cityMappings.keys.join(', ')}');
    }

    cityName = cityMappings[cityKey]!;
    
    final configFile = File('assets/config/cities/$cityName/$cityName.json');
    if (!await configFile.exists()) {
      throw Exception('Configuration file not found: ${configFile.path}');
    }

    final configContent = await configFile.readAsString();
    final configJson = jsonDecode(configContent) as Map<String, dynamic>;
    config = CityConfig.fromJson(configJson);

    logInfo('Loaded configuration for ${config.city}');
  }

  /// Generate flavor-specific Dart configuration file
  Future<void> generateConfigFile() async {
    const configTemplate = '''
// GENERATED FILE - DO NOT EDIT MANUALLY
// Generated by build_city.dart script

import 'dart:convert';

class AppConfig {
  static const String cityName = '{cityName}';
  static const String displayName = '{displayName}';
  static const String domain = '{domain}';
  static const double latitude = {latitude};
  static const double longitude = {longitude};
  static const String downloadLink = '{downloadLink}';
  static const String? termsLink = {termsLink};
  static const String androidPackage = '{androidPackage}';
  static const String iosPackage = '{iosPackage}';
  static const String? whatsapp = {whatsapp};
  static const String? chatBotURL = {chatBotURL};
  static const List<int> products = {products};
  static const List<int> vehicleTypes = {vehicleTypes};
  static const String mainLogo = '{mainLogo}';
  static const String logoMenu = '{logoMenu}';
  
  // Complex data stored as JSON strings to avoid const issues
  static const String _balanceJson = '{balanceJson}';
  static const String? _parkingRulesTextJson = {parkingRulesTextJson};
  static const String _parkingRulesJson = '{parkingRulesJson}';
  static const String _purchaseJson = '{purchaseJson}';
  static const String _faqJson = '{faqJson}';
  
  // Getters that parse JSON
  static Map<String, dynamic> get balance => jsonDecode(_balanceJson) as Map<String, dynamic>;
  static String? get parkingRulesText => _parkingRulesTextJson;
  static Map<String, dynamic> get parkingRules => jsonDecode(_parkingRulesJson) as Map<String, dynamic>;
  static Map<String, dynamic> get purchase => jsonDecode(_purchaseJson) as Map<String, dynamic>;
  static List<Map<String, dynamic>> get faq {
    final decoded = jsonDecode(_faqJson);
    if (decoded is List) {
      return decoded.cast<Map<String, dynamic>>();
    }
    return <Map<String, dynamic>>[];
  }
}
''';

    final configDir = Directory('lib/config/generated');
    await configDir.create(recursive: true);

    // Escape strings properly for Dart
    String escapeString(String str) {
      return str.replaceAll('\\', '\\\\')
                .replaceAll("'", "\\'")
                .replaceAll('\$', '\\\$')  // Escape dollar signs
                .replaceAll('"', '\\"')    // Escape double quotes  
                .replaceAll('\n', '\\n')
                .replaceAll('\r', '\\r')
                .replaceAll('\t', '\\t');
    }

    final configContent = configTemplate
        .replaceAll('{cityName}', escapeString(config.city))
        .replaceAll('{displayName}', escapeString(displayName))
        .replaceAll('{domain}', escapeString(config.domain))
        .replaceAll('{latitude}', config.latitude.toString())
        .replaceAll('{longitude}', config.longitude.toString())
        .replaceAll('{downloadLink}', escapeString(config.downloadLink))
        .replaceAll('{termsLink}', config.termsLink != null ? "'${escapeString(config.termsLink!)}'" : 'null')
        .replaceAll('{androidPackage}', escapeString(config.androidPackage))
        .replaceAll('{iosPackage}', escapeString(config.iosPackage))
        .replaceAll('{whatsapp}', config.whatsapp != null ? "'${escapeString(config.whatsapp!)}'" : 'null')
        .replaceAll('{chatBotURL}', config.chatBotURL != null ? "'${escapeString(config.chatBotURL!)}'" : 'null')
        .replaceAll('{products}', config.products.toString())
        .replaceAll('{vehicleTypes}', config.vehicleTypes.toString())
        .replaceAll('{mainLogo}', escapeString(config.mainLogo))
        .replaceAll('{logoMenu}', escapeString(config.logoMenu))
        .replaceAll('{balanceJson}', escapeString(jsonEncode(config.balance)))
        .replaceAll('{parkingRulesTextJson}', config.parkingRulesText != null ? "'${escapeString(config.parkingRulesText!)}'" : 'null')
        .replaceAll('{parkingRulesJson}', escapeString(jsonEncode(config.parkingRules)))
        .replaceAll('{purchaseJson}', escapeString(jsonEncode(config.purchase)))
        .replaceAll('{faqJson}', escapeString(jsonEncode(config.faq)));

    final configFile = File('lib/config/generated/app_config.dart');
    await configFile.writeAsString(configContent);

    logInfo('Generated app configuration at ${configFile.path}');
  }

  /// Run the build process
  Future<void> run() async {
    try {
      logBuild('Building Flutter app for city: $cityKey ($displayName)');
      
      await loadCityConfig();
      await generateConfigFile();
      
      logSuccess('Build configuration completed successfully!');
      logInstructions('');
      logInstructions('üì± To build for Android:');
      logInstructions('   flutter build apk --flavor ${cityKey.toLowerCase()} --release');
      logInstructions('   flutter build appbundle --flavor ${cityKey.toLowerCase()} --release');
      logInstructions('');
      logInstructions('üçé To build for iOS:');
      logInstructions('   flutter build ios --release');
      logInstructions('   (Configure the scheme in Xcode to use the correct GoogleService-Info.plist)');
      
    } catch (e) {
      logError('Error: $e');
      exit(1);
    }
  }
}

/// Main function
void main(List<String> args) async {
  if (args.isEmpty) {
    logInstructions('üì± Rotativo Digital - City Build Script');
    logInstructions('');
    logInstructions('Usage: dart scripts/build_city.dart <city> [display_name]');
    logInstructions('');
    logInstructions('Available cities:');
    cityMappings.forEach((key, value) {
      logInstructions('  $key -> $value');
    });
    logInstructions('');
    logInstructions('Examples:');
    logInstructions('  dart scripts/build_city.dart patos "Rotativo Patos"');
    logInstructions('  dart scripts/build_city.dart main "Rotativo"');
    exit(1);
  }

  final cityKey = args[0].toLowerCase();
  final displayName = args.length > 1 ? args[1] : 'Rotativo ${cityMappings[cityKey] ?? cityKey}';

  final buildScript = CityBuildScript(cityKey, displayName);
  await buildScript.run();
}