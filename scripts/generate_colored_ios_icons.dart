import 'dart:convert';
import 'dart:io';

/// Script para gerar √≠cones iOS com cores aplicadas diretamente no √≠cone
/// Similar ao comportamento do Android onde a cor prim√°ria √© vis√≠vel no √≠cone
void main() async {
  print('üé® Gerando √≠cones iOS com cores aplicadas diretamente...\n');

  // Configura√ß√µes dos flavors
  final flavors = {
    'Main': {
      'configPath': 'assets/config/cities/Main/Main.json',
      'defaultColor': '#5A7B97',
    },
    'OuroPreto': {
      'configPath': 'assets/config/cities/OuroPreto/OuroPreto.json',
    },
    'Vicosa': {
      'configPath': 'assets/config/cities/Vicosa/Vicosa.json',
    },
  };

  // Verifica se ImageMagick est√° dispon√≠vel
  final magickCheck = await Process.run('which', ['magick']);
  final hasImageMagick = magickCheck.exitCode == 0;

  if (!hasImageMagick) {
    print('‚ö†Ô∏è  ImageMagick n√£o encontrado. Tentando instalar...');
    print('   Execute: brew install imagemagick');
    print('   Ou continue sem modifica√ß√£o de cores (apenas background)');
  }

  final baseIconPath = 'assets/images/icons/icon.png';
  final baseIconFile = File(baseIconPath);

  if (!baseIconFile.existsSync()) {
    print('‚ùå √çcone base n√£o encontrado: $baseIconPath');
    return;
  }

  // Para cada flavor, gera √≠cones com cores espec√≠ficas
  for (final entry in flavors.entries) {
    final flavorName = entry.key;
    final config = entry.value;

    print('üì± Processando flavor: $flavorName');

    // L√™ a configura√ß√£o da cidade
    final configFile = File(config['configPath'] as String);
    if (!configFile.existsSync()) {
      print('   ‚ö†Ô∏è  Arquivo de configura√ß√£o n√£o encontrado');
      continue;
    }

    final configContent = await configFile.readAsString();
    final cityConfig = jsonDecode(configContent) as Map<String, dynamic>;

    // Obt√©m a cor prim√°ria
    final primaryColor = cityConfig['primaryColor'] as String? ??
        config['defaultColor'] as String? ??
        '#5A7B97';

    print('   Cor: $primaryColor');

    // Cria um √≠cone tempor√°rio com a cor aplicada
    final tempIconPath = 'temp_icon_$flavorName.png';

    if (hasImageMagick) {
      // Usa ImageMagick para aplicar a cor no √≠cone
      // Cria um √≠cone com fundo colorido e o √≠cone original sobreposto
      final magickResult = await Process.run('magick', [
        baseIconPath,
        '(',
        '-clone',
        '0',
        '-fill',
        primaryColor,
        '-colorize',
        '100%',
        ')',
        '(',
        '-clone',
        '0',
        '-alpha',
        'extract',
        ')',
        '-compose',
        'over',
        '-composite',
        tempIconPath
      ]);

      if (magickResult.exitCode != 0) {
        print(
            '   ‚ö†Ô∏è  Erro ao aplicar cor com ImageMagick: ${magickResult.stderr}');
        // Fallback: copia o √≠cone original
        await baseIconFile.copy(tempIconPath);
      } else {
        print('   ‚úÖ Cor aplicada ao √≠cone');
      }
    } else {
      // Fallback: usa o √≠cone original
      await baseIconFile.copy(tempIconPath);
      print('   ‚ö†Ô∏è  Usando √≠cone original (sem modifica√ß√£o de cor)');
    }

    // Cria configura√ß√£o do flutter_launcher_icons para este flavor
    final iconConfigFile =
        File('flutter_launcher_icons_colored_$flavorName.yaml');
    final iconConfig = '''
flutter_launcher_icons:
  android: false
  ios: true
  image_path: "$tempIconPath"
  
  # iOS - Configura√ß√µes espec√≠ficas
  remove_alpha_ios: false
  ios_padding: 15
  
  # Define o nome do AppIcon espec√≠fico para o flavor
  ios_app_icon_name: "AppIcon-$flavorName"
''';

    await iconConfigFile.writeAsString(iconConfig);

    // Gera os √≠cones iOS
    print('   üîÑ Gerando √≠cones iOS...');
    final result = await Process.run('dart', [
      'run',
      'flutter_launcher_icons',
      '-f',
      'flutter_launcher_icons_colored_$flavorName.yaml'
    ]);

    if (result.exitCode == 0) {
      print('   ‚úÖ √çcones iOS gerados com sucesso');
    } else {
      print('   ‚ö†Ô∏è  Erro ao gerar √≠cones: ${result.stderr}');
    }

    // Remove arquivos tempor√°rios
    final tempFile = File(tempIconPath);
    if (tempFile.existsSync()) {
      await tempFile.delete();
    }

    final configTempFile =
        File('flutter_launcher_icons_colored_$flavorName.yaml');
    if (configTempFile.existsSync()) {
      await configTempFile.delete();
    }

    print('   üßπ Arquivos tempor√°rios removidos\n');
  }

  print('‚ú® Processo conclu√≠do!');
  print('\nüìù Resumo:');
  if (hasImageMagick) {
    print('   ‚Ä¢ √çcones iOS gerados com cores aplicadas diretamente');
    print('   ‚Ä¢ Cada flavor tem sua cor prim√°ria vis√≠vel no √≠cone');
  } else {
    print('   ‚Ä¢ √çcones iOS gerados (instale ImageMagick para aplicar cores)');
    print('   ‚Ä¢ Para instalar: brew install imagemagick');
  }
  print('   ‚Ä¢ Sistema de c√≥pia autom√°tica mantido');
  print('\nüß™ Para testar:');
  print('   flutter run --flavor ouroPreto -d ios');
  print('   flutter run --flavor vicosa -d ios');
  print('   flutter run --flavor main -d ios');
}

