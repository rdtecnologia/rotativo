import 'dart:async';
import 'dart:io';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:timezone/timezone.dart' as tz;
import 'package:timezone/data/latest.dart' as tz;
import 'package:flutter_riverpod/flutter_riverpod.dart';

/// Servi√ßo para gerenciar notifica√ß√µes locais
class LocalNotificationService {
  static final LocalNotificationService _instance =
      LocalNotificationService._internal();
  factory LocalNotificationService() => _instance;
  LocalNotificationService._internal();

  final FlutterLocalNotificationsPlugin _notifications =
      FlutterLocalNotificationsPlugin();

  bool _isInitialized = false;

  /// Inicializa o servi√ßo de notifica√ß√µes
  Future<void> initialize() async {
    try {
      // Inicializa timezone
      tz.initializeTimeZones();

      // Aguarda um momento para garantir que o banco de dados seja carregado
      await Future.delayed(const Duration(milliseconds: 500));

      // Define timezone padr√£o para Brasil
      try {
        final location = tz.getLocation('America/Sao_Paulo');
        tz.setLocalLocation(location);
      } catch (e) {
        tz.setLocalLocation(tz.UTC);
      }

      // Configura√ß√£o para Android
      const androidSettings =
          AndroidInitializationSettings('@mipmap/ic_launcher');

      // Configura√ß√£o para iOS
      const iosSettings = DarwinInitializationSettings(
        requestAlertPermission: true,
        requestBadgePermission: true,
        requestSoundPermission: true,
        // ‚úÖ Configura√ß√µes adicionais para iOS
        defaultPresentAlert: true,
        defaultPresentBadge: true,
        defaultPresentSound: true,
        // ‚úÖ Configura√ß√µes para emulador
        notificationCategories: [],
      );

      // Configura√ß√£o inicial
      const initSettings = InitializationSettings(
        android: androidSettings,
        iOS: iosSettings,
      );

      // Inicializa o plugin
      await _notifications.initialize(
        initSettings,
        onDidReceiveNotificationResponse: _onNotificationTapped,
      );

      // Solicita permiss√µes
      await _requestPermissions();

      _isInitialized = true;
    } catch (e) {
      rethrow;
    }
  }

  /// Garante que o servi√ßo est√° inicializado antes do uso
  Future<void> _ensureInitialized() async {
    if (!_isInitialized) {
      debugPrint('‚ö†Ô∏è Servi√ßo n√£o inicializado, inicializando agora...');
      await initialize();
    }
  }

  /// Solicita permiss√µes necess√°rias
  Future<void> _requestPermissions() async {
    try {
      // Para Android 13+ (API 33+)
      if (await Permission.notification.isDenied) {
        final status = await Permission.notification.request();
        debugPrint('üîî Permiss√£o de notifica√ß√£o: $status');
      }

      // Para Android 12+ (API 31+): Verifica permiss√£o de alarmes exatos
      if (await Permission.scheduleExactAlarm.isDenied) {
        final status = await Permission.scheduleExactAlarm.request();
        debugPrint('üîî Permiss√£o de alarme exato: $status');
      }

      // ‚úÖ CORRE√á√ÉO CR√çTICA: Verificar otimiza√ß√µes de bateria no Android
      if (Platform.isAndroid) {
        try {
          final batteryOptimization =
              await Permission.ignoreBatteryOptimizations.status;
          debugPrint('üîã Status otimiza√ß√£o de bateria: $batteryOptimization');

          if (batteryOptimization.isDenied) {
            debugPrint(
                '‚ö†Ô∏è IMPORTANTE: App est√° sujeito a otimiza√ß√µes de bateria');
            debugPrint(
                '‚ö†Ô∏è Isso pode impedir notifica√ß√µes agendadas de funcionarem');
            debugPrint('üí° Solicitando permiss√£o para ignorar otimiza√ß√µes...');

            final result =
                await Permission.ignoreBatteryOptimizations.request();
            debugPrint('üîã Resultado da permiss√£o de bateria: $result');

            if (result.isDenied) {
              debugPrint(
                  '‚ö†Ô∏è ATEN√á√ÉO: Notifica√ß√µes agendadas podem n√£o funcionar corretamente');
              debugPrint(
                  'üí° Recomenda√ß√£o: Desabilite manualmente as otimiza√ß√µes de bateria para este app');
            }
          } else {
            debugPrint('‚úÖ App n√£o est√° sujeito a otimiza√ß√µes de bateria');
          }
        } catch (e) {
          debugPrint('‚ö†Ô∏è Erro ao verificar otimiza√ß√µes de bateria: $e');
        }
      }

      debugPrint('üîî Status das permiss√µes:');
      debugPrint('  - Notifica√ß√£o: ${await Permission.notification.status}');
      debugPrint(
          '  - Alarme Exato: ${await Permission.scheduleExactAlarm.status}');
      if (Platform.isAndroid) {
        debugPrint(
            '  - Ignorar otimiza√ß√£o de bateria: ${await Permission.ignoreBatteryOptimizations.status}');
      }
    } catch (e) {
      debugPrint('‚ö†Ô∏è Erro ao solicitar permiss√µes: $e');
    }
  }

  /// Callback quando uma notifica√ß√£o √© tocada
  void _onNotificationTapped(NotificationResponse response) {
    debugPrint('üîî Notifica√ß√£o tocada: ${response.payload}');
  }

  /// Agenda uma notifica√ß√£o de vencimento de estacionamento
  Future<void> scheduleParkingExpirationNotification({
    required String licensePlate,
    required DateTime expirationTime,
    required int reminderMinutes,
    String? location,
    bool? soundEnabled,
    bool? vibrationEnabled,
    bool? lightsEnabled,
  }) async {
    // Garante que o servi√ßo est√° inicializado
    await _ensureInitialized();

    // Verifica permiss√µes antes de agendar
    final notificationPermission = await Permission.notification.status;
    final exactAlarmPermission = await Permission.scheduleExactAlarm.status;

    debugPrint('üîî Verificando permiss√µes antes do agendamento:');
    debugPrint('  - Notifica√ß√£o: $notificationPermission');
    debugPrint('  - Alarme Exato: $exactAlarmPermission');

    // Para Android, verifica se precisa solicitar permiss√£o de alarme exato
    bool canScheduleExact = true;
    if (Platform.isAndroid) {
      debugPrint(
          'ü§ñ === VERIFICA√á√ïES ESPEC√çFICAS ANDROID PARA ESTACIONAMENTO ===');

      // Verifica otimiza√ß√µes de bateria
      try {
        final batteryOptimized = await checkBatteryOptimizations();
        debugPrint(
            'üîã Otimiza√ß√µes de bateria: ${batteryOptimized ? "OK" : "PROBLEMA"}');

        if (!batteryOptimized) {
          debugPrint('‚ö†Ô∏è CR√çTICO: App sujeito a otimiza√ß√µes de bateria!');
          debugPrint(
              'üí° Isso IMPEDE notifica√ß√µes agendadas de funcionarem no Android');
          debugPrint(
              'üí° SOLU√á√ÉO: Desabilite otimiza√ß√µes de bateria para este app');
          debugPrint(
              'üí° Caminho: Configura√ß√µes > Apps > Rotativo > Bateria > N√£o otimizar');
        }
      } catch (e) {
        debugPrint('‚ö†Ô∏è Erro ao verificar otimiza√ß√µes de bateria: $e');
      }

      if (exactAlarmPermission.isDenied) {
        debugPrint('‚ö†Ô∏è Android: Solicitando permiss√£o de alarme exato...');
        final result = await Permission.scheduleExactAlarm.request();
        debugPrint('üîî Resultado da permiss√£o de alarme exato: $result');
        canScheduleExact = result.isGranted;
      } else {
        canScheduleExact = exactAlarmPermission.isGranted;
      }

      if (!canScheduleExact) {
        debugPrint(
            '‚ö†Ô∏è Android: Alarmes exatos n√£o permitidos, usando modo normal');
      }

      debugPrint('ü§ñ === FIM VERIFICA√á√ïES ANDROID ===');
    }

    // Calcula o hor√°rio da notifica√ß√£o
    final notificationTime =
        expirationTime.subtract(Duration(minutes: reminderMinutes));

    // Se o hor√°rio j√° passou, n√£o agenda
    if (notificationTime.isBefore(DateTime.now())) {
      debugPrint('‚è∞ Hor√°rio de notifica√ß√£o j√° passou para $licensePlate');
      return;
    }

    // ‚úÖ CORRE√á√ÉO: Usar o mesmo canal que funciona para notifica√ß√µes de 10s
    await _createOrUpdateNotificationChannel(
      'immediate',
      'Notifica√ß√µes Imediatas',
      'Notifica√ß√µes que aparecem imediatamente',
      soundEnabled: soundEnabled ?? true,
      vibrationEnabled: vibrationEnabled ?? true,
      lightsEnabled: lightsEnabled ?? true,
    );

    // ID √∫nico para a notifica√ß√£o
    final notificationId =
        _generateNotificationId(licensePlate, reminderMinutes);

    debugPrint('üîî === AGENDANDO NOTIFICA√á√ÉO DE ESTACIONAMENTO ===');
    debugPrint('  - Placa: $licensePlate');
    debugPrint('  - Expira √†s: ${expirationTime.toString()}');
    debugPrint('  - Anteced√™ncia: $reminderMinutes minutos');
    debugPrint('  - Hor√°rio da notifica√ß√£o: ${notificationTime.toString()}');
    debugPrint('  - Plataforma: ${Platform.isAndroid ? "Android" : "iOS"}');
    debugPrint(
        '  - Som: $soundEnabled, Vibra√ß√£o: $vibrationEnabled, Luzes: $lightsEnabled');
    debugPrint('  - Local: ${location ?? "N√£o informado"}');

    if (Platform.isAndroid) {
      debugPrint(
          'ü§ñ === VERIFICA√á√ïES ESPEC√çFICAS ANDROID PARA ESTACIONAMENTO ===');

      // Verifica otimiza√ß√µes de bateria
      try {
        final batteryOptimized = await checkBatteryOptimizations();
        debugPrint(
            'üîã Otimiza√ß√µes de bateria: ${batteryOptimized ? "OK" : "PROBLEMA"}');

        if (!batteryOptimized) {
          debugPrint('‚ö†Ô∏è CR√çTICO: App sujeito a otimiza√ß√µes de bateria!');
          debugPrint(
              'üí° Isso IMPEDE notifica√ß√µes agendadas de funcionarem no Android');
          debugPrint(
              'üí° SOLU√á√ÉO: Desabilite otimiza√ß√µes de bateria para este app');
          debugPrint(
              'üí° Caminho: Configura√ß√µes > Apps > Rotativo > Bateria > N√£o otimizar');
        }
      } catch (e) {
        debugPrint('‚ö†Ô∏è Erro ao verificar otimiza√ß√µes de bateria: $e');
      }

      debugPrint('ü§ñ === FIM VERIFICA√á√ïES ANDROID ===');
    }

    try {
      debugPrint('üîî Tentando agendar notifica√ß√£o:');
      debugPrint('  - ID: $notificationId');
      debugPrint('  - Placa: $licensePlate');
      debugPrint('  - Hor√°rio atual: ${DateTime.now()}');
      debugPrint('  - Hor√°rio da notifica√ß√£o: $notificationTime');
      debugPrint('  - Timezone local: ${tz.local}');
      debugPrint(
          '  - TZDateTime: ${tz.TZDateTime.from(notificationTime, tz.local)}');
      debugPrint(
          '  - Diferen√ßa at√© notifica√ß√£o: ${notificationTime.difference(DateTime.now()).inMinutes} minutos');
      debugPrint('  - Modo Android: ${canScheduleExact ? "exact" : "inexact"}');

      // ‚úÖ CORRE√á√ÉO: Usar a mesma abordagem de timezone que funciona nos testes
      final now = tz.TZDateTime.now(tz.local);
      final minutesUntilNotification =
          notificationTime.difference(DateTime.now()).inMinutes;
      final tzNotificationTime =
          now.add(Duration(minutes: minutesUntilNotification));

      debugPrint('üîß === CORRE√á√ÉO TIMEZONE ===');
      debugPrint('  - DateTime notificationTime: $notificationTime');
      debugPrint('  - TZDateTime.now(): $now');
      debugPrint('  - Minutos at√© notifica√ß√£o: $minutesUntilNotification');
      debugPrint('  - TZDateTime target: $tzNotificationTime');
      debugPrint('üîß === FIM CORRE√á√ÉO ===');

      // ‚úÖ Usar a API correta para agendar notifica√ß√µes
      await _notifications.zonedSchedule(
        notificationId,
        'Estacionamento expirando',
        'O estacionamento do ve√≠culo $licensePlate expira em $reminderMinutes minutos${location != null ? ' em $location' : ''}',
        tzNotificationTime,
        NotificationDetails(
          android: AndroidNotificationDetails(
            'immediate',
            'Notifica√ß√µes Imediatas',
            channelDescription: 'Notifica√ß√µes que aparecem imediatamente',
            importance: Importance.max,
            priority: Priority.max,
            color: Colors.orange,
            icon: '@mipmap/ic_launcher',
            // Configura√ß√µes espec√≠ficas para garantir som e vibra√ß√£o
            enableVibration: vibrationEnabled ?? true,
            enableLights: lightsEnabled ?? true,
            playSound: soundEnabled ?? true,
            // Configura√ß√µes adicionais para garantir funcionamento
            vibrationPattern: vibrationEnabled == true
                ? Int64List.fromList([0, 250, 250, 250])
                : null,
            ledColor: lightsEnabled == true ? Colors.blue : null,
            ledOnMs: lightsEnabled == true ? 1000 : null,
            ledOffMs: lightsEnabled == true ? 1000 : null,
            // ‚úÖ Configura√ß√µes adicionais para Android agendadas
            showWhen: true,
            when: notificationTime.millisecondsSinceEpoch,
            usesChronometer: false,
            chronometerCountDown: false,
            category: AndroidNotificationCategory
                .alarm, // ‚úÖ Categoria de alarme para maior prioridade
            visibility: NotificationVisibility.public,
            autoCancel: true, // ‚úÖ Remove a notifica√ß√£o quando tocada
          ),
          iOS: DarwinNotificationDetails(
            presentAlert: true,
            presentBadge: true,
            presentSound: true,
            // ‚úÖ Configura√ß√µes adicionais para iOS
            badgeNumber: 1,
            threadIdentifier: 'parking_notifications',
            categoryIdentifier: 'parking_expiration',
            // ‚úÖ Configura√ß√µes para emulador
            interruptionLevel: InterruptionLevel.active,
          ),
        ),
        payload:
            'parking_expiration:$licensePlate:${expirationTime.toIso8601String()}',
        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,
        // ‚úÖ CORRE√á√ÉO CR√çTICA: Usar allowWhileIdle para funcionar mesmo com otimiza√ß√µes de bateria
        // ‚úÖ CORRE√á√ÉO: Remover matchDateTimeComponents para agendar apenas uma vez
        // matchDateTimeComponents: DateTimeComponents.time, // ‚ùå Isso fazia repetir diariamente
      );

      debugPrint('‚úÖ Notifica√ß√£o de estacionamento agendada com sucesso!');

      // ‚úÖ FALLBACK: Timer para garantir que funcione no Android
      if (Platform.isAndroid && minutesUntilNotification > 0) {
        Timer(Duration(minutes: minutesUntilNotification), () async {
          debugPrint('‚è∞ Timer estacionamento disparado para $licensePlate!');
          try {
            await _notifications.show(
              notificationId + 100000, // ID diferente para fallback
              'Estacionamento expirando',
              'O estacionamento do ve√≠culo $licensePlate expira em $reminderMinutes minutos${location != null ? ' em $location' : ''}',
              NotificationDetails(
                android: AndroidNotificationDetails(
                  'immediate',
                  'Notifica√ß√µes Imediatas',
                  channelDescription: 'Notifica√ß√µes que aparecem imediatamente',
                  importance: Importance.max,
                  priority: Priority.max,
                  color: Colors.orange,
                  icon: '@mipmap/ic_launcher',
                  enableVibration: vibrationEnabled ?? true,
                  enableLights: lightsEnabled ?? true,
                  playSound: soundEnabled ?? true,
                  category: AndroidNotificationCategory.alarm,
                  visibility: NotificationVisibility.public,
                ),
              ),
              payload: 'parking_timer:$licensePlate',
            );
            debugPrint(
                '‚úÖ Notifica√ß√£o de estacionamento enviada para $licensePlate!');
          } catch (e) {
            debugPrint('‚ùå Erro na notifica√ß√£o de estacionamento: $e');
          }
        });
      }

      // Verificar se a notifica√ß√£o foi realmente agendada
      await Future.delayed(const Duration(milliseconds: 500));
      final pendingNotifications =
          await _notifications.pendingNotificationRequests();
      final scheduledNotification =
          pendingNotifications.where((n) => n.id == notificationId).isNotEmpty
              ? pendingNotifications.where((n) => n.id == notificationId).first
              : null;

      debugPrint('üîç === VERIFICA√á√ÉO P√ìS-AGENDAMENTO ===');
      debugPrint(
          '  - Total notifica√ß√µes pendentes: ${pendingNotifications.length}');
      debugPrint('  - Procurando ID: $notificationId');

      if (scheduledNotification != null) {
        debugPrint('‚úÖ CONFIRMADO: Notifica√ß√£o est√° na lista de pendentes');
        debugPrint('  - ID: ${scheduledNotification.id}');
        debugPrint('  - T√≠tulo: ${scheduledNotification.title}');
        debugPrint('  - Corpo: ${scheduledNotification.body}');

        if (Platform.isAndroid) {
          final timeUntilNotification =
              notificationTime.difference(DateTime.now());
          debugPrint(
              'ü§ñ Android - Tempo at√© notifica√ß√£o: ${timeUntilNotification.inSeconds}s');
          debugPrint(
              'ü§ñ Android - Modo: ${canScheduleExact ? "exactAllowWhileIdle" : "inexactAllowWhileIdle"}');
        }
      } else {
        debugPrint(
            '‚ùå PROBLEMA CR√çTICO: Notifica√ß√£o N√ÉO foi encontrada na lista de pendentes!');
        debugPrint('üìã Todas as notifica√ß√µes pendentes:');
        for (final notification in pendingNotifications) {
          debugPrint(
              '  - ID: ${notification.id}, T√≠tulo: ${notification.title}');
        }
      }
    } catch (e) {
      debugPrint('‚ùå ERRO CR√çTICO ao agendar notifica√ß√£o para $licensePlate:');
      debugPrint('  - Tipo do erro: ${e.runtimeType}');
      debugPrint('  - Mensagem: ${e.toString()}');
      debugPrint('  - Stack trace: ${StackTrace.current}');

      // N√£o fazer fallback - mas vamos investigar o erro
      rethrow; // Re-lan√ßa o erro para que possa ser capturado em n√≠veis superiores
    }
  }

  /// Cancela todas as notifica√ß√µes de um ve√≠culo espec√≠fico
  Future<void> cancelVehicleNotifications(String licensePlate) async {
    // Cancela notifica√ß√µes com IDs que cont√™m a placa
    final pendingNotifications =
        await _notifications.pendingNotificationRequests();

    for (final notification in pendingNotifications) {
      if (notification.payload?.contains(licensePlate) == true) {
        await _notifications.cancel(notification.id);
        debugPrint(
            'üîî Notifica√ß√£o cancelada para $licensePlate (ID: ${notification.id})');
      }
    }
  }

  /// Cancela todas as notifica√ß√µes
  Future<void> cancelAllNotifications() async {
    await _notifications.cancelAll();
    debugPrint('üîî Todas as notifica√ß√µes foram canceladas');
  }

  /// Cancela apenas notifica√ß√µes de estacionamento real, preserva testes
  Future<void> cancelOnlyParkingNotifications() async {
    final pendingNotifications =
        await _notifications.pendingNotificationRequests();

    for (final notification in pendingNotifications) {
      // Preserva notifica√ß√µes de teste (IDs espec√≠ficos e payloads de teste)
      if (_isTestNotification(notification)) {
        debugPrint(
            'üîî Preservando notifica√ß√£o de teste: ${notification.title} (ID: ${notification.id})');
        continue;
      }

      // Cancela notifica√ß√µes de estacionamento real
      if (_isParkingNotification(notification)) {
        await _notifications.cancel(notification.id);
        debugPrint(
            'üîî Cancelada notifica√ß√£o de estacionamento: ${notification.title} (ID: ${notification.id})');
      }
    }
  }

  /// Verifica se √© uma notifica√ß√£o de teste
  bool _isTestNotification(PendingNotificationRequest notification) {
    // IDs de teste conhecidos
    const testIds = {999999, 888888, 777777, 666666, 111111, 222222};
    if (testIds.contains(notification.id)) return true;

    // Payloads de teste
    final payload = notification.payload ?? '';
    if (payload.contains('test') ||
        payload.contains('android_10s') ||
        payload.contains('android_parking_2min') ||
        payload.contains('timer_test') ||
        payload.contains('simple_test') ||
        payload.contains('comparison')) {
      return true;
    }

    // T√≠tulos de teste
    final title = notification.title ?? '';
    if (title.contains('TESTE') ||
        title.contains('ü§ñ') ||
        title.contains('üöó') ||
        title.contains('‚è±Ô∏è') ||
        title.contains('üîç')) {
      return true;
    }

    return false;
  }

  /// Verifica se √© uma notifica√ß√£o de estacionamento real
  bool _isParkingNotification(PendingNotificationRequest notification) {
    final payload = notification.payload ?? '';
    return payload.startsWith('parking_expiration:');
  }

  /// Mostra uma notifica√ß√£o imediata (para testes)
  Future<void> showImmediateNotification({
    required String title,
    required String body,
    String? payload,
    bool? soundEnabled,
    bool? vibrationEnabled,
    bool? lightsEnabled,
  }) async {
    print('üîî [RELEASE] Iniciando notifica√ß√£o imediata: $title');

    // Garante que o servi√ßo est√° inicializado
    await _ensureInitialized();

    try {
      // ‚úÖ Verifica√ß√£o espec√≠fica para iOS
      if (Platform.isIOS) {
        // Para iOS, vamos usar configura√ß√µes mais simples
        await _notifications.show(
          DateTime.now().millisecondsSinceEpoch ~/ 1000,
          title,
          body,
          NotificationDetails(
            iOS: DarwinNotificationDetails(
              presentAlert: true,
              presentBadge: true,
              presentSound: true,
              // ‚úÖ Configura√ß√µes espec√≠ficas para iOS
              badgeNumber: 1,
              threadIdentifier: 'immediate_notifications',
              categoryIdentifier: 'immediate',
              // ‚úÖ Configura√ß√µes para emulador
              interruptionLevel: InterruptionLevel.active,
            ),
          ),
          payload: payload,
        );

        await Future.delayed(const Duration(seconds: 2));

        return;
      }

      // Cria ou atualiza o canal de notifica√ß√£o com as configura√ß√µes
      await _createOrUpdateNotificationChannel(
        'immediate',
        'Notifica√ß√µes Imediatas',
        'Notifica√ß√µes que aparecem imediatamente',
        soundEnabled: soundEnabled ?? true,
        vibrationEnabled: vibrationEnabled ?? true,
        lightsEnabled: lightsEnabled ?? true,
      );

      await _notifications.show(
        DateTime.now().millisecondsSinceEpoch ~/ 1000,
        title,
        body,
        NotificationDetails(
          android: AndroidNotificationDetails(
            'immediate',
            'Notifica√ß√µes Imediatas',
            channelDescription: 'Notifica√ß√µes que aparecem imediatamente',
            importance: Importance.max, // ‚úÖ Import√¢ncia m√°xima
            priority: Priority.max, // ‚úÖ Prioridade m√°xima
            // Configura √≠cone expl√≠cito para evitar NullPointerException
            icon: '@mipmap/ic_launcher',
            // ‚úÖ Configura√ß√µes espec√≠ficas da notifica√ß√£o
            enableVibration: vibrationEnabled ?? true,
            enableLights: lightsEnabled ?? true,
            playSound: soundEnabled ?? true,
          ),
          iOS: DarwinNotificationDetails(
            presentAlert: true,
            presentBadge: true,
            presentSound: true,
            // ‚úÖ Configura√ß√µes adicionais para iOS
            badgeNumber: 1,
            threadIdentifier: 'immediate_notifications',
            categoryIdentifier: 'immediate',
            // ‚úÖ Configura√ß√µes para emulador
            interruptionLevel: InterruptionLevel.active,
          ),
        ),
        payload: payload,
      );

      // Verificar se a notifica√ß√£o foi realmente processada
      final pendingNotifications =
          await _notifications.pendingNotificationRequests();
    } catch (e) {
      //
    }
  }

  /// Lista todas as notifica√ß√µes pendentes
  Future<List<PendingNotificationRequest>> getPendingNotifications() async {
    return await _notifications.pendingNotificationRequests();
  }

  /// Lista e exibe todas as notifica√ß√µes pendentes para debug
  Future<void> debugPendingNotifications() async {
    try {
      final pendingNotifications =
          await _notifications.pendingNotificationRequests();
      debugPrint('üîî === NOTIFICA√á√ïES PENDENTES ===');
      debugPrint('üìä Total: ${pendingNotifications.length}');

      if (pendingNotifications.isEmpty) {
        debugPrint('‚ùå Nenhuma notifica√ß√£o pendente encontrada!');
      } else {
        for (final notification in pendingNotifications) {
          debugPrint('üìã ID: ${notification.id}');
          debugPrint('   T√≠tulo: ${notification.title}');
          debugPrint('   Corpo: ${notification.body}');
          debugPrint('   Payload: ${notification.payload}');
          debugPrint('   ---');
        }
      }
      debugPrint('üîî === FIM DA LISTA ===');
    } catch (e) {
      debugPrint('‚ùå Erro ao listar notifica√ß√µes pendentes: $e');
    }
  }

  /// Verifica se as notifica√ß√µes est√£o habilitadas
  Future<bool> areNotificationsEnabled() async {
    final androidEnabled = await _notifications
        .resolvePlatformSpecificImplementation<
            AndroidFlutterLocalNotificationsPlugin>()
        ?.areNotificationsEnabled();

    // Para iOS, assume que est√° habilitado se n√£o h√° erro
    const iosEnabled = true;

    return androidEnabled ?? iosEnabled;
  }

  /// Verifica e exibe o status completo das notifica√ß√µes e permiss√µes
  Future<void> debugSystemStatus() async {
    debugPrint('üîç === STATUS COMPLETO DO SISTEMA ===');

    try {
      // Plataforma
      debugPrint('üì± Plataforma: ${Platform.operatingSystem}');
      debugPrint('üì± Vers√£o: ${Platform.operatingSystemVersion}');

      // Timezone
      debugPrint('üåç Timezone local: ${tz.local}');
      debugPrint('üåç Timezone atual: ${DateTime.now().timeZoneName}');
      debugPrint('üåç Offset: ${DateTime.now().timeZoneOffset}');

      // Permiss√µes
      if (Platform.isAndroid) {
        final notificationStatus = await Permission.notification.status;
        final exactAlarmStatus = await Permission.scheduleExactAlarm.status;
        debugPrint(
            'üîî Permiss√£o de notifica√ß√£o (Android): $notificationStatus');
        debugPrint('‚è∞ Permiss√£o de alarme exato (Android): $exactAlarmStatus');
      }

      // Status das notifica√ß√µes
      final enabled = await areNotificationsEnabled();
      debugPrint('üîî Notifica√ß√µes habilitadas: $enabled');

      // Notifica√ß√µes pendentes
      final pending = await _notifications.pendingNotificationRequests();
      debugPrint('üìä Total de notifica√ß√µes pendentes: ${pending.length}');

      if (pending.isNotEmpty) {
        debugPrint('üìã Notifica√ß√µes pendentes:');
        for (final notification in pending) {
          debugPrint(
              '  - ID: ${notification.id}, T√≠tulo: ${notification.title}');
        }
      }

      // Teste de inicializa√ß√£o
      debugPrint('üîß Testando inicializa√ß√£o...');
      await initialize();
      debugPrint('‚úÖ Inicializa√ß√£o OK');
    } catch (e) {
      debugPrint('‚ùå Erro ao verificar status: $e');
    }

    debugPrint('üîç === FIM DO STATUS ===');
  }

  /// Gera um ID √∫nico para a notifica√ß√£o
  int _generateNotificationId(String licensePlate, int reminderMinutes) {
    // Combina hash da placa com os minutos para criar um ID √∫nico
    final hash = licensePlate.hashCode;
    final minutesHash = reminderMinutes.hashCode;
    return (hash + minutesHash).abs() % 2147483647; // Max int32
  }

  /// Agenda notifica√ß√£o de teste
  Future<void> scheduleTestNotification({
    bool? soundEnabled,
    bool? vibrationEnabled,
    bool? lightsEnabled,
  }) async {
    // Garante que o servi√ßo est√° inicializado
    await _ensureInitialized();

    // Verifica permiss√µes antes de agendar
    final notificationPermission = await Permission.notification.status;
    final exactAlarmPermission = await Permission.scheduleExactAlarm.status;

    debugPrint('üîî Verificando permiss√µes antes do teste:');
    debugPrint('  - Notifica√ß√£o: $notificationPermission');
    debugPrint('  - Alarme Exato: $exactAlarmPermission');

    // Para Android, verifica se precisa solicitar permiss√£o de alarme exato
    bool canScheduleExact = true;
    if (Platform.isAndroid) {
      if (exactAlarmPermission.isDenied) {
        debugPrint('‚ö†Ô∏è Android: Solicitando permiss√£o de alarme exato...');
        final result = await Permission.scheduleExactAlarm.request();
        debugPrint('üîî Resultado da permiss√£o de alarme exato: $result');
        canScheduleExact = result.isGranted;
      } else {
        canScheduleExact = exactAlarmPermission.isGranted;
      }

      if (!canScheduleExact) {
        debugPrint(
            '‚ö†Ô∏è Android: Alarmes exatos n√£o permitidos, usando modo normal');
      }
    }

    // Cria ou atualiza o canal de notifica√ß√£o com as configura√ß√µes
    await _createOrUpdateNotificationChannel(
      'test',
      'Teste',
      'Notifica√ß√µes de teste',
      soundEnabled: soundEnabled ?? true,
      vibrationEnabled: vibrationEnabled ?? true,
      lightsEnabled: lightsEnabled ?? true,
    );

    debugPrint('üß™ Agendando notifica√ß√£o de teste para 5 segundos...');
    debugPrint(
        'üß™ Configura√ß√µes: Som=$soundEnabled, Vibra√ß√£o=$vibrationEnabled, Luzes=$lightsEnabled');

    try {
      // ‚úÖ Usar a API correta para agendar notifica√ß√µes
      final scheduledTime = DateTime.now().add(const Duration(seconds: 5));
      final notificationId = 999999; // ID de teste

      debugPrint('üß™ === DETALHES DO TESTE DE 5 SEGUNDOS ===');
      debugPrint('  - ID: $notificationId');
      debugPrint('  - Hor√°rio atual: ${DateTime.now()}');
      debugPrint('  - Hor√°rio agendado: $scheduledTime');
      debugPrint('  - Timezone local: ${tz.local}');
      debugPrint(
          '  - TZDateTime: ${tz.TZDateTime.from(scheduledTime, tz.local)}');
      debugPrint(
          '  - Configura√ß√µes: Som=$soundEnabled, Vibra√ß√£o=$vibrationEnabled, Luzes=$lightsEnabled');

      await _notifications.zonedSchedule(
        notificationId,
        'Teste de Notifica√ß√£o',
        'Esta √© uma notifica√ß√£o de teste!',
        tz.TZDateTime.from(scheduledTime, tz.local),
        NotificationDetails(
          android: AndroidNotificationDetails(
            'test',
            'Teste',
            channelDescription: 'Notifica√ß√µes de teste',
            importance: Importance.max,
            priority: Priority.max,
            icon: '@mipmap/ic_launcher',
            // ‚úÖ Configura√ß√µes espec√≠ficas para garantir som e vibra√ß√£o
            enableVibration: vibrationEnabled ?? true,
            enableLights: lightsEnabled ?? true,
            playSound: soundEnabled ?? true,
            // ‚úÖ Configura√ß√µes adicionais para garantir funcionamento
            vibrationPattern: vibrationEnabled == true
                ? Int64List.fromList([0, 250, 250, 250])
                : null,
            ledColor: lightsEnabled == true ? Colors.blue : null,
            ledOnMs: lightsEnabled == true ? 1000 : null,
            ledOffMs: lightsEnabled == true ? 1000 : null,
            // ‚úÖ Configura√ß√µes adicionais para for√ßar som e vibra√ß√£o
            showWhen: true,
            when: DateTime.now().millisecondsSinceEpoch,
            usesChronometer: false,
            chronometerCountDown: false,
            category: AndroidNotificationCategory.message,
            visibility: NotificationVisibility.public,
          ),
          iOS: DarwinNotificationDetails(
            presentAlert: true,
            presentBadge: true,
            presentSound: true,
            // ‚úÖ Configura√ß√µes adicionais para iOS
            badgeNumber: 1,
            threadIdentifier: 'test_notifications',
            categoryIdentifier: 'test',
            // ‚úÖ Configura√ß√µes para emulador
            interruptionLevel: InterruptionLevel.active,
          ),
        ),
        payload: 'test',
        androidScheduleMode: canScheduleExact
            ? AndroidScheduleMode.exactAllowWhileIdle
            : AndroidScheduleMode.inexactAllowWhileIdle,
        // ‚úÖ CORRE√á√ÉO CR√çTICA: Usar allowWhileIdle para funcionar mesmo com otimiza√ß√µes de bateria
        // ‚úÖ CORRE√á√ÉO: Remover matchDateTimeComponents para agendar apenas uma vez
        // matchDateTimeComponents: DateTimeComponents.time, // ‚ùå Isso fazia repetir diariamente
      );

      debugPrint('‚úÖ Notifica√ß√£o de teste agendada com sucesso!');

      // Verificar se foi realmente agendada
      await Future.delayed(const Duration(milliseconds: 500));
      final pendingNotifications =
          await _notifications.pendingNotificationRequests();
      final found =
          pendingNotifications.where((n) => n.id == notificationId).isNotEmpty
              ? pendingNotifications.where((n) => n.id == notificationId).first
              : null;

      if (found != null) {
        debugPrint('‚úÖ CONFIRMADO: Teste est√° na lista de pendentes!');
        debugPrint('  - T√≠tulo: ${found.title}');
        debugPrint('  - Corpo: ${found.body}');
        debugPrint('  - Canal: ${found.payload}');
        debugPrint(
            '  - Modo Android: ${canScheduleExact ? "exact" : "inexact"}');
      } else {
        debugPrint(
            '‚ùå PROBLEMA CR√çTICO: Teste N√ÉO foi encontrado na lista de pendentes!');
        debugPrint(
            'üìä Total de notifica√ß√µes pendentes: ${pendingNotifications.length}');

        // Listar todas as pendentes para debug
        for (final notification in pendingNotifications) {
          debugPrint(
              'üìã Pendente: ID=${notification.id}, T√≠tulo=${notification.title}');
        }
      }

      // Debug adicional para Android
      if (Platform.isAndroid) {
        debugPrint('ü§ñ === DEBUG ANDROID ESPEC√çFICO ===');
        debugPrint(
            '  - Modo de agendamento: ${canScheduleExact ? "exact" : "inexact"}');
        debugPrint('  - Permiss√£o de notifica√ß√£o: $notificationPermission');
        debugPrint('  - Permiss√£o de alarme exato: $exactAlarmPermission');
        debugPrint('  - Canal criado: test');
        debugPrint('ü§ñ === FIM DEBUG ANDROID ===');
      }

      debugPrint('üß™ === FIM DOS DETALHES DO TESTE ===');

      // Teste adicional para Android: notifica√ß√£o imediata para comparar
      if (Platform.isAndroid) {
        debugPrint(
            'ü§ñ Testando notifica√ß√£o imediata no Android para compara√ß√£o...');
        await Future.delayed(const Duration(seconds: 1));
        await showImmediateNotification(
          title: 'Teste Imediato Android',
          body:
              'Esta √© uma notifica√ß√£o imediata para testar se o canal funciona',
          soundEnabled: soundEnabled,
          vibrationEnabled: vibrationEnabled,
          lightsEnabled: lightsEnabled,
        );
      }
    } catch (e) {
      debugPrint('‚ùå ERRO CR√çTICO no teste de 5 segundos:');
      debugPrint('  - Tipo do erro: ${e.runtimeType}');
      debugPrint('  - Mensagem: ${e.toString()}');
      debugPrint('  - Stack trace: ${StackTrace.current}');

      // Re-lan√ßa o erro para que possa ser investigado
      rethrow;
    }
  }

  /// Testa notifica√ß√µes espec√≠ficas para iOS
  Future<void> testIOSNotification() async {
    if (!Platform.isIOS) return;

    debugPrint('üçé Testando notifica√ß√£o espec√≠fica para iOS...');

    try {
      // ‚úÖ Configura√ß√£o espec√≠fica para iOS
      await _notifications.show(
        999, // ID fixo para teste
        'üçé Teste iOS',
        'Esta √© uma notifica√ß√£o de teste espec√≠fica para iOS',
        NotificationDetails(
          iOS: DarwinNotificationDetails(
            presentAlert: true,
            presentBadge: true,
            presentSound: true,
            badgeNumber: 999,
            threadIdentifier: 'ios_test',
            categoryIdentifier: 'test',
            interruptionLevel: InterruptionLevel.active,
          ),
        ),
        payload: 'ios_test_notification',
      );

      debugPrint('üçé Notifica√ß√£o de teste iOS enviada com sucesso');
      debugPrint(
          'üçé Verifique o Centro de Notifica√ß√µes (puxe para baixo no topo)');
    } catch (e) {
      debugPrint('‚ùå Erro ao enviar notifica√ß√£o de teste iOS: $e');
    }
  }

  /// Testa notifica√ß√£o agendada espec√≠fica para iOS
  Future<void> testIOScheduledNotification() async {
    if (!Platform.isIOS) return;

    debugPrint('üçé Testando notifica√ß√£o agendada espec√≠fica para iOS...');

    try {
      // Agendar notifica√ß√£o para 10 segundos no futuro
      final scheduledTime = DateTime.now().add(const Duration(seconds: 10));

      await _notifications.zonedSchedule(
        888, // ID fixo para teste
        'üçé Teste iOS Agendado',
        'Esta √© uma notifica√ß√£o agendada espec√≠fica para iOS',
        tz.TZDateTime.from(scheduledTime, tz.local),
        NotificationDetails(
          iOS: DarwinNotificationDetails(
            presentAlert: true,
            presentBadge: true,
            presentSound: true,
            badgeNumber: 888,
            threadIdentifier: 'ios_scheduled_test',
            categoryIdentifier: 'test',
            interruptionLevel: InterruptionLevel.active,
          ),
        ),
        payload: 'ios_scheduled_test_notification',
        androidScheduleMode: AndroidScheduleMode.inexact,
        // ‚úÖ CORRE√á√ÉO: Remover matchDateTimeComponents para agendar apenas uma vez
        // matchDateTimeComponents: DateTimeComponents.time, // ‚ùå Isso fazia repetir diariamente
      );

      debugPrint('üçé Notifica√ß√£o agendada iOS configurada com sucesso');
      debugPrint('üçé Notifica√ß√£o aparecer√° em 10 segundos');
      debugPrint(
          'üçé Verifique o Centro de Notifica√ß√µes (puxe para baixo no topo)');
    } catch (e) {
      debugPrint('‚ùå Erro ao agendar notifica√ß√£o de teste iOS: $e');
    }
  }

  /// Testa notifica√ß√µes espec√≠ficas para Android
  Future<void> testAndroidNotification() async {
    if (!Platform.isAndroid) return;

    debugPrint('ü§ñ Testando notifica√ß√£o espec√≠fica para Android...');

    try {
      // ‚úÖ Configura√ß√£o espec√≠fica para Android
      await _notifications.show(
        888, // ID fixo para teste
        'ü§ñ Teste Android',
        'Esta √© uma notifica√ß√£o de teste espec√≠fica para Android',
        NotificationDetails(
          android: AndroidNotificationDetails(
            'android_test',
            'Teste Android',
            channelDescription: 'Notifica√ß√µes de teste para Android',
            importance: Importance.max,
            priority: Priority.max,
            icon: '@mipmap/ic_launcher',
            enableVibration: true,
            enableLights: true,
            playSound: true,
            category: AndroidNotificationCategory.message,
            visibility: NotificationVisibility.public,
            autoCancel: true,
            showWhen: true,
            when: DateTime.now().millisecondsSinceEpoch,
          ),
        ),
        payload: 'android_test_notification',
      );

      debugPrint('ü§ñ Notifica√ß√£o de teste Android enviada com sucesso');
      debugPrint('ü§ñ Verifique a barra de notifica√ß√µes');
    } catch (e) {
      debugPrint('‚ùå Erro ao enviar notifica√ß√£o de teste Android: $e');
    }
  }

  /// Testa notifica√ß√£o agendada espec√≠fica para Android
  Future<void> testAndroidScheduledNotification() async {
    if (!Platform.isAndroid) return;

    debugPrint('ü§ñ Testando notifica√ß√£o agendada espec√≠fica para Android...');

    try {
      // Verifica permiss√µes espec√≠ficas do Android
      final notificationPermission = await Permission.notification.status;
      final exactAlarmPermission = await Permission.scheduleExactAlarm.status;

      debugPrint('ü§ñ Permiss√µes Android:');
      debugPrint('  - Notifica√ß√£o: $notificationPermission');
      debugPrint('  - Alarme Exato: $exactAlarmPermission');

      // Solicita permiss√µes se necess√°rio
      bool canScheduleExact = true;
      if (exactAlarmPermission.isDenied) {
        debugPrint('ü§ñ Solicitando permiss√£o de alarme exato...');
        final result = await Permission.scheduleExactAlarm.request();
        debugPrint('ü§ñ Resultado: $result');
        canScheduleExact = result.isGranted;
      } else {
        canScheduleExact = exactAlarmPermission.isGranted;
      }

      // Agendar notifica√ß√£o para 10 segundos no futuro
      final scheduledTime = DateTime.now().add(const Duration(seconds: 10));

      debugPrint('ü§ñ Agendando para: $scheduledTime');
      debugPrint('ü§ñ Modo: ${canScheduleExact ? "exact" : "inexact"}');

      await _notifications.zonedSchedule(
        777, // ID fixo para teste
        'ü§ñ Teste Android Agendado',
        'Esta √© uma notifica√ß√£o agendada espec√≠fica para Android (10 segundos)',
        tz.TZDateTime.from(scheduledTime, tz.local),
        NotificationDetails(
          android: AndroidNotificationDetails(
            'android_scheduled_test',
            'Teste Android Agendado',
            channelDescription: 'Teste de notifica√ß√£o agendada para Android',
            importance: Importance.max,
            priority: Priority.max,
            icon: '@mipmap/ic_launcher',
            enableVibration: true,
            enableLights: true,
            playSound: true,
            category: AndroidNotificationCategory.alarm,
            visibility: NotificationVisibility.public,
            autoCancel: true,
            showWhen: true,
            when: scheduledTime.millisecondsSinceEpoch,
            usesChronometer: false,
            chronometerCountDown: false,
          ),
        ),
        payload: 'android_scheduled_test_notification',
        androidScheduleMode: canScheduleExact
            ? AndroidScheduleMode.exactAllowWhileIdle
            : AndroidScheduleMode.inexactAllowWhileIdle,
        // ‚úÖ CORRE√á√ÉO CR√çTICA: Usar allowWhileIdle para funcionar mesmo com otimiza√ß√µes de bateria
        // ‚úÖ CORRE√á√ÉO: Remover matchDateTimeComponents para agendar apenas uma vez
        // matchDateTimeComponents: DateTimeComponents.time, // ‚ùå Isso fazia repetir diariamente
      );

      debugPrint('ü§ñ Notifica√ß√£o agendada Android configurada com sucesso');
      debugPrint('ü§ñ Notifica√ß√£o aparecer√° em 10 segundos');
      debugPrint('ü§ñ Verifique a barra de notifica√ß√µes');

      // Verificar se foi agendada
      await Future.delayed(const Duration(milliseconds: 500));
      final pending = await _notifications.pendingNotificationRequests();
      final found = pending.where((n) => n.id == 777).isNotEmpty
          ? pending.where((n) => n.id == 777).first
          : null;

      if (found != null) {
        debugPrint('ü§ñ ‚úÖ Confirmado: Teste Android est√° na lista de pendentes');
        debugPrint('ü§ñ   - T√≠tulo: ${found.title}');
        debugPrint('ü§ñ   - Corpo: ${found.body}');
      } else {
        debugPrint(
            'ü§ñ ‚ùå PROBLEMA: Teste Android N√ÉO foi encontrado na lista de pendentes!');
      }
    } catch (e) {
      debugPrint('‚ùå Erro ao agendar notifica√ß√£o de teste Android: $e');
      debugPrint('üí° Stack trace: ${StackTrace.current}');
    }
  }

  /// Debug espec√≠fico para Android
  Future<void> debugAndroidSpecific() async {
    if (!Platform.isAndroid) return;

    debugPrint('ü§ñ === DEBUG ESPEC√çFICO ANDROID ===');

    try {
      // Informa√ß√µes da plataforma
      debugPrint('üì± Android detectado');
      debugPrint('üì± Vers√£o do SO: ${Platform.operatingSystemVersion}');

      // Permiss√µes
      final notificationStatus = await Permission.notification.status;
      final exactAlarmStatus = await Permission.scheduleExactAlarm.status;
      debugPrint('üîî Permiss√£o de notifica√ß√£o: $notificationStatus');
      debugPrint('‚è∞ Permiss√£o de alarme exato: $exactAlarmStatus');

      // Status das notifica√ß√µes
      final enabled = await areNotificationsEnabled();
      debugPrint('üîî Notifica√ß√µes habilitadas: $enabled');

      // Timezone
      debugPrint('üåç Timezone local: ${tz.local}');
      debugPrint('üåç Offset atual: ${DateTime.now().timeZoneOffset}');

      // Canais de notifica√ß√£o existentes
      debugPrint('üì∫ Testando cria√ß√£o de canal...');
      await _createOrUpdateNotificationChannel(
        'debug_android',
        'Debug Android',
        'Canal de debug para Android',
      );
      debugPrint('üì∫ Canal de debug criado com sucesso');

      // Notifica√ß√µes pendentes
      final pending = await _notifications.pendingNotificationRequests();
      debugPrint('üìä Total de notifica√ß√µes pendentes: ${pending.length}');

      if (pending.isNotEmpty) {
        debugPrint('üìã Notifica√ß√µes pendentes:');
        for (final notification in pending) {
          debugPrint(
              '  - ID: ${notification.id}, T√≠tulo: ${notification.title}');
        }
      }

      // ‚úÖ NOVA VERIFICA√á√ÉO: Otimiza√ß√µes de bateria
      try {
        final batteryOptimization =
            await Permission.ignoreBatteryOptimizations.status;
        debugPrint('üîã Otimiza√ß√£o de bateria: $batteryOptimization');

        if (batteryOptimization.isDenied) {
          debugPrint(
              '‚ö†Ô∏è PROBLEMA CR√çTICO: App est√° sujeito a otimiza√ß√µes de bateria!');
          debugPrint(
              '‚ö†Ô∏è Isso pode impedir notifica√ß√µes agendadas de funcionarem!');
          debugPrint(
              'üí° SOLU√á√ÉO: Desabilite as otimiza√ß√µes de bateria para este app');
          debugPrint(
              'üí° Caminho: Configura√ß√µes > Apps > Rotativo > Bateria > N√£o otimizar');
        } else {
          debugPrint('‚úÖ App n√£o est√° sujeito a otimiza√ß√µes de bateria');
        }
      } catch (e) {
        debugPrint('‚ö†Ô∏è Erro ao verificar otimiza√ß√µes de bateria: $e');
      }

      debugPrint('ü§ñ === FIM DEBUG ANDROID ===');
    } catch (e) {
      debugPrint('‚ùå Erro no debug espec√≠fico Android: $e');
    }
  }

  /// Verifica se as otimiza√ß√µes de bateria est√£o impedindo notifica√ß√µes
  Future<bool> checkBatteryOptimizations() async {
    if (!Platform.isAndroid) return true;

    try {
      final status = await Permission.ignoreBatteryOptimizations.status;
      debugPrint('üîã Verifica√ß√£o de otimiza√ß√µes de bateria:');
      debugPrint('  - Status: $status');
      debugPrint('  - Permitido: ${status.isGranted}');

      if (status.isDenied) {
        debugPrint('‚ö†Ô∏è PROBLEMA: App est√° sujeito a otimiza√ß√µes de bateria');
        debugPrint(
            'üí° Isso pode impedir notifica√ß√µes agendadas de funcionarem');
        return false;
      }

      return true;
    } catch (e) {
      debugPrint('‚ùå Erro ao verificar otimiza√ß√µes de bateria: $e');
      return false;
    }
  }

  /// Solicita ao usu√°rio para desabilitar otimiza√ß√µes de bateria
  Future<void> requestDisableBatteryOptimizations() async {
    if (!Platform.isAndroid) return;

    try {
      debugPrint(
          'üîã Solicitando permiss√£o para ignorar otimiza√ß√µes de bateria...');
      final result = await Permission.ignoreBatteryOptimizations.request();
      debugPrint('üîã Resultado: $result');

      if (result.isGranted) {
        debugPrint('‚úÖ Otimiza√ß√µes de bateria desabilitadas com sucesso!');
      } else {
        debugPrint(
            '‚ö†Ô∏è Usu√°rio n√£o permitiu desabilitar otimiza√ß√µes de bateria');
        debugPrint(
            'üí° Notifica√ß√µes agendadas podem n√£o funcionar corretamente');
      }
    } catch (e) {
      debugPrint('‚ùå Erro ao solicitar desabilita√ß√£o de otimiza√ß√µes: $e');
    }
  }

  /// Teste espec√≠fico para notifica√ß√µes de longo prazo (como estacionamento real)
  Future<void> testLongTermNotification({int minutesFromNow = 2}) async {
    debugPrint('‚è∞ === TESTE DE NOTIFICA√á√ÉO DE LONGO PRAZO ===');
    debugPrint('‚è∞ Agendando notifica√ß√£o para $minutesFromNow minutos...');

    final scheduledTime = DateTime.now().add(Duration(minutes: minutesFromNow));
    final notificationId = 777777;

    debugPrint('üìÖ Hor√°rio atual: ${DateTime.now()}');
    debugPrint('üìÖ Hor√°rio agendado: $scheduledTime');
    debugPrint('üÜî ID da notifica√ß√£o: $notificationId');
    debugPrint(
        '‚è∞ Diferen√ßa: ${scheduledTime.difference(DateTime.now()).inMinutes} minutos');

    try {
      // Verifica permiss√µes espec√≠ficas
      final notificationPermission = await Permission.notification.status;
      final exactAlarmPermission = await Permission.scheduleExactAlarm.status;
      bool canScheduleExact = exactAlarmPermission.isGranted;

      debugPrint('üîî Permiss√µes para teste longo prazo:');
      debugPrint('  - Notifica√ß√£o: $notificationPermission');
      debugPrint('  - Alarme Exato: $exactAlarmPermission');
      debugPrint('  - Pode agendar exato: $canScheduleExact');

      await _notifications.zonedSchedule(
        notificationId,
        '‚è∞ Teste Longo Prazo',
        'Esta notifica√ß√£o foi agendada para aparecer em $minutesFromNow minutos! (${scheduledTime.hour}:${scheduledTime.minute.toString().padLeft(2, '0')})',
        tz.TZDateTime.from(scheduledTime, tz.local),
        NotificationDetails(
          android: AndroidNotificationDetails(
            'test_long_term',
            'Teste Longo Prazo',
            channelDescription: 'Notifica√ß√µes de teste para longo prazo',
            importance: Importance.max,
            priority: Priority.max,
            icon: '@mipmap/ic_launcher',
            enableVibration: true,
            enableLights: true,
            playSound: true,
            category: AndroidNotificationCategory.alarm,
            visibility: NotificationVisibility.public,
            autoCancel: true,
            showWhen: true,
            when: scheduledTime.millisecondsSinceEpoch,
            usesChronometer: false,
            chronometerCountDown: false,
          ),
          iOS: DarwinNotificationDetails(
            presentAlert: true,
            presentBadge: true,
            presentSound: true,
            badgeNumber: 777,
            threadIdentifier: 'long_term_test',
            categoryIdentifier: 'test',
            interruptionLevel: InterruptionLevel.active,
          ),
        ),
        payload: 'long_term_test_notification',
        androidScheduleMode: canScheduleExact
            ? AndroidScheduleMode.exactAllowWhileIdle
            : AndroidScheduleMode.inexactAllowWhileIdle,
        // ‚úÖ SEM matchDateTimeComponents para evitar repeti√ß√£o
      );

      debugPrint('‚úÖ Notifica√ß√£o de longo prazo agendada com sucesso!');

      // Verificar se foi agendada
      await Future.delayed(const Duration(milliseconds: 500));
      final pending = await _notifications.pendingNotificationRequests();
      final found = pending.where((n) => n.id == notificationId).isNotEmpty
          ? pending.where((n) => n.id == notificationId).first
          : null;

      if (found != null) {
        debugPrint(
            '‚úÖ CONFIRMADO: Teste longo prazo est√° na lista de pendentes');
        debugPrint('  - T√≠tulo: ${found.title}');
        debugPrint('  - Corpo: ${found.body}');
      } else {
        debugPrint(
            '‚ùå PROBLEMA: Teste longo prazo N√ÉO foi encontrado na lista de pendentes!');
      }

      debugPrint('‚è∞ Aguarde $minutesFromNow minutos para ver a notifica√ß√£o...');
      debugPrint(
          '‚è∞ Notifica√ß√£o deve aparecer √†s ${scheduledTime.hour}:${scheduledTime.minute.toString().padLeft(2, '0')}');

      // Debug adicional para Android
      if (Platform.isAndroid) {
        debugPrint('ü§ñ === DEBUG LONGO PRAZO ANDROID ===');
        debugPrint('  - Timezone atual: ${DateTime.now().timeZoneName}');
        debugPrint('  - Offset: ${DateTime.now().timeZoneOffset}');
        debugPrint('  - TZ Local: ${tz.local.name}');
        debugPrint(
            '  - TZDateTime: ${tz.TZDateTime.from(scheduledTime, tz.local)}');
        debugPrint(
            '  - √â no futuro: ${tz.TZDateTime.from(scheduledTime, tz.local).isAfter(tz.TZDateTime.now(tz.local))}');
        debugPrint('ü§ñ === FIM DEBUG LONGO PRAZO ===');
      }
    } catch (e) {
      debugPrint('‚ùå ERRO no teste de longo prazo: $e');
      debugPrint('üí° Stack trace: ${StackTrace.current}');
    }
  }

  /// Compara notifica√ß√µes de curto vs longo prazo para identificar diferen√ßas
  Future<void> compareShortVsLongTerm() async {
    debugPrint('üîç === COMPARA√á√ÉO CURTO VS LONGO PRAZO ===');

    try {
      // Teste curto prazo (30 segundos)
      debugPrint('üîç Agendando teste CURTO PRAZO (30 segundos)...');
      final shortTime = DateTime.now().add(const Duration(seconds: 30));
      final shortId = 111111;

      await _notifications.zonedSchedule(
        shortId,
        'üîç Curto Prazo',
        'Teste de 30 segundos - deve funcionar',
        tz.TZDateTime.from(shortTime, tz.local),
        NotificationDetails(
          android: AndroidNotificationDetails(
            'comparison_short',
            'Compara√ß√£o Curto',
            channelDescription: 'Teste comparativo curto prazo',
            importance: Importance.max,
            priority: Priority.max,
            icon: '@mipmap/ic_launcher',
            enableVibration: true,
            enableLights: true,
            playSound: true,
            category: AndroidNotificationCategory.alarm,
            visibility: NotificationVisibility.public,
            autoCancel: true,
            showWhen: true,
            when: shortTime.millisecondsSinceEpoch,
          ),
          iOS: DarwinNotificationDetails(
            presentAlert: true,
            presentBadge: true,
            presentSound: true,
            badgeNumber: 111,
            threadIdentifier: 'comparison_short',
            categoryIdentifier: 'test',
            interruptionLevel: InterruptionLevel.active,
          ),
        ),
        payload: 'comparison_short',
        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,
      );

      // Aguarda um pouco
      await Future.delayed(const Duration(milliseconds: 100));

      // Teste longo prazo (5 minutos)
      debugPrint('üîç Agendando teste LONGO PRAZO (5 minutos)...');
      final longTime = DateTime.now().add(const Duration(minutes: 5));
      final longId = 222222;

      await _notifications.zonedSchedule(
        longId,
        'üîç Longo Prazo',
        'Teste de 5 minutos - pode n√£o funcionar no Android',
        tz.TZDateTime.from(longTime, tz.local),
        NotificationDetails(
          android: AndroidNotificationDetails(
            'comparison_long',
            'Compara√ß√£o Longo',
            channelDescription: 'Teste comparativo longo prazo',
            importance: Importance.max,
            priority: Priority.max,
            icon: '@mipmap/ic_launcher',
            enableVibration: true,
            enableLights: true,
            playSound: true,
            category: AndroidNotificationCategory.alarm,
            visibility: NotificationVisibility.public,
            autoCancel: true,
            showWhen: true,
            when: longTime.millisecondsSinceEpoch,
          ),
          iOS: DarwinNotificationDetails(
            presentAlert: true,
            presentBadge: true,
            presentSound: true,
            badgeNumber: 222,
            threadIdentifier: 'comparison_long',
            categoryIdentifier: 'test',
            interruptionLevel: InterruptionLevel.active,
          ),
        ),
        payload: 'comparison_long',
        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,
      );

      // Verificar se ambas foram agendadas
      await Future.delayed(const Duration(milliseconds: 500));
      final pending = await _notifications.pendingNotificationRequests();

      final shortFound = pending.where((n) => n.id == shortId).isNotEmpty;
      final longFound = pending.where((n) => n.id == longId).isNotEmpty;

      debugPrint('üîç Resultados da compara√ß√£o:');
      debugPrint('  - Curto prazo (30s) agendado: $shortFound');
      debugPrint('  - Longo prazo (5min) agendado: $longFound');

      if (shortFound && longFound) {
        debugPrint('‚úÖ Ambas as notifica√ß√µes foram agendadas');
        debugPrint(
            'üí° Se apenas a de 30s funcionar, o problema √© espec√≠fico de longo prazo');
      } else {
        debugPrint('‚ùå Problema no agendamento:');
        if (!shortFound) debugPrint('  - Curto prazo N√ÉO foi agendado');
        if (!longFound) debugPrint('  - Longo prazo N√ÉO foi agendado');
      }

      debugPrint('üîç Aguarde para comparar qual funciona...');
      debugPrint('  - 30 segundos: notifica√ß√£o curto prazo');
      debugPrint('  - 5 minutos: notifica√ß√£o longo prazo');
    } catch (e) {
      debugPrint('‚ùå Erro na compara√ß√£o: $e');
    }
  }

  /// Teste simples de notifica√ß√£o agendada (funciona em iOS e Android)
  Future<void> testSimpleScheduledNotification(
      {int secondsFromNow = 30}) async {
    debugPrint('üß™ === TESTE SIMPLES DE NOTIFICA√á√ÉO AGENDADA ===');
    debugPrint('‚è∞ Agendando notifica√ß√£o para $secondsFromNow segundos...');

    final scheduledTime = DateTime.now().add(Duration(seconds: secondsFromNow));
    final notificationId = 999999;

    debugPrint('üìÖ Hor√°rio atual: ${DateTime.now()}');
    debugPrint('üìÖ Hor√°rio agendado: $scheduledTime');
    debugPrint('üÜî ID da notifica√ß√£o: $notificationId');

    try {
      await _notifications.zonedSchedule(
        notificationId,
        'üß™ Teste Simples',
        'Esta notifica√ß√£o foi agendada para aparecer em $secondsFromNow segundos!',
        tz.TZDateTime.from(scheduledTime, tz.local),
        NotificationDetails(
          android: AndroidNotificationDetails(
            'test_simple',
            'Teste Simples',
            channelDescription: 'Notifica√ß√µes de teste simples',
            importance: Importance.max,
            priority: Priority.max,
            icon: '@mipmap/ic_launcher',
            enableVibration: true,
            enableLights: true,
            playSound: true,
          ),
          iOS: DarwinNotificationDetails(
            presentAlert: true,
            presentBadge: true,
            presentSound: true,
            badgeNumber: 999,
            threadIdentifier: 'simple_test',
            categoryIdentifier: 'test',
            interruptionLevel: InterruptionLevel.active,
          ),
        ),
        payload: 'simple_test_notification',
        androidScheduleMode: AndroidScheduleMode.inexactAllowWhileIdle,
        // ‚úÖ CORRE√á√ÉO CR√çTICA: Usar allowWhileIdle para funcionar mesmo com otimiza√ß√µes de bateria
        // ‚úÖ CORRE√á√ÉO: Remover matchDateTimeComponents para agendar apenas uma vez
        // matchDateTimeComponents: DateTimeComponents.time, // ‚ùå Isso fazia repetir diariamente
      );

      debugPrint('‚úÖ Notifica√ß√£o agendada com sucesso!');

      // Verificar se foi agendada
      await Future.delayed(const Duration(milliseconds: 500));
      final pending = await _notifications.pendingNotificationRequests();
      final found = pending.where((n) => n.id == notificationId).isNotEmpty
          ? pending.where((n) => n.id == notificationId).first
          : null;

      if (found != null) {
        debugPrint('‚úÖ Confirmado: Notifica√ß√£o est√° na lista de pendentes');
      } else {
        debugPrint(
            '‚ùå PROBLEMA: Notifica√ß√£o N√ÉO foi encontrada na lista de pendentes!');
      }

      debugPrint(
          'üîî Aguarde $secondsFromNow segundos para ver a notifica√ß√£o...');
    } catch (e) {
      debugPrint('‚ùå ERRO ao agendar teste simples: $e');
      debugPrint('üí° Stack trace: ${StackTrace.current}');
    }
  }

  /// Testa notifica√ß√£o de 10 segundos espec√≠fica para Android
  Future<void> testAndroid10SecondsNotification({
    bool soundEnabled = true,
    bool vibrationEnabled = true,
    bool lightsEnabled = true,
  }) async {
    if (!Platform.isAndroid) {
      debugPrint('‚ö†Ô∏è Teste espec√≠fico apenas para Android');
      return;
    }

    debugPrint('ü§ñ === TESTE ANDROID 10 SEGUNDOS - IN√çCIO ===');

    try {
      // Garante inicializa√ß√£o
      await _ensureInitialized();

      // Verifica permiss√µes cr√≠ticas
      await _checkAndroidCriticalPermissions();

      // Usa o mesmo canal que funciona para notifica√ß√µes imediatas
      await _createOrUpdateNotificationChannel(
        'immediate',
        'Notifica√ß√µes Imediatas',
        'Notifica√ß√µes que aparecem imediatamente',
        soundEnabled: soundEnabled,
        vibrationEnabled: vibrationEnabled,
        lightsEnabled: lightsEnabled,
      );

      // Calcula tempo exato com mais precis√£o
      final now = DateTime.now();
      final notificationTime = now.add(const Duration(seconds: 10));

      // Converte para timezone local com debug
      final tzNow = tz.TZDateTime.now(tz.local);
      final tzNotificationTime = tzNow.add(const Duration(seconds: 10));

      debugPrint('‚è∞ === DEBUG TIMING ===');
      debugPrint('‚è∞ DateTime.now(): ${now.hour}:${now.minute}:${now.second}');
      debugPrint(
          '‚è∞ TZDateTime.now(): ${tzNow.hour}:${tzNow.minute}:${tzNow.second}');
      debugPrint(
          '‚è∞ Agendando para: ${tzNotificationTime.hour}:${tzNotificationTime.minute}:${tzNotificationTime.second}');
      debugPrint(
          '‚è∞ Diferen√ßa em segundos: ${tzNotificationTime.difference(tzNow).inSeconds}');
      debugPrint('‚è∞ Timezone: ${tz.local}');

      // Agenda com ID √∫nico e configura√ß√µes for√ßadas
      const testId = 999999;

      // Usa zonedSchedule com abordagem mais simples
      debugPrint('üîÑ Usando zonedSchedule com DateTime convertido...');

      await _notifications.zonedSchedule(
        testId,
        'ü§ñ TESTE ANDROID 10s',
        'Se voc√™ est√° vendo isso, o Android est√° funcionando! üéâ',
        tz.TZDateTime.from(
            notificationTime, tz.local), // Converte DateTime para TZDateTime
        NotificationDetails(
          android: AndroidNotificationDetails(
            'immediate',
            'Notifica√ß√µes Imediatas',
            channelDescription: 'Notifica√ß√µes que aparecem imediatamente',
            importance: Importance.max,
            priority: Priority.max,
            icon: '@mipmap/ic_launcher',
            enableVibration: vibrationEnabled,
            enableLights: lightsEnabled,
            playSound: soundEnabled,
            // Configura√ß√µes extras para for√ßar funcionamento
            vibrationPattern: vibrationEnabled
                ? Int64List.fromList([0, 1000, 500, 1000])
                : null,
            ledColor: lightsEnabled ? Colors.red : null,
            ledOnMs: lightsEnabled ? 2000 : null,
            ledOffMs: lightsEnabled ? 1000 : null,
            category: AndroidNotificationCategory.alarm,
            visibility: NotificationVisibility.public,
            autoCancel: false,
            ongoing: false,
            showWhen: true,
            when: notificationTime.millisecondsSinceEpoch,
            // Usa som padr√£o do sistema se som estiver habilitado
            sound: null, // null usa o som padr√£o do canal
            // Configura√ß√µes de canal
            channelShowBadge: true,
            onlyAlertOnce: false,
            // Configura√ß√µes de apresenta√ß√£o
            ticker: 'Teste Android 10s',
            subText: 'Funcionou!',
            // Configura√ß√µes de timing
            timeoutAfter: null, // N√£o expira automaticamente
          ),
        ),
        payload: 'android_10s_test',
        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,
      );

      debugPrint('‚úÖ Notifica√ß√£o de 10s agendada');

      // Verifica se foi agendado corretamente
      await Future.delayed(const Duration(milliseconds: 1000));
      final pending = await _notifications.pendingNotificationRequests();
      final testNotification = pending.where((n) => n.id == testId).toList();

      debugPrint('üîç === VERIFICA√á√ÉO DETALHADA ===');
      debugPrint('üìã Total pendentes: ${pending.length}');
      debugPrint('üîç Procurando ID: $testId');

      if (testNotification.isNotEmpty) {
        debugPrint('‚úÖ CONFIRMADO: Teste de 10s est√° na lista pendente');
        debugPrint('  - ID: ${testNotification.first.id}');
        debugPrint('  - T√≠tulo: ${testNotification.first.title}');
        debugPrint('  - Corpo: ${testNotification.first.body}');

        // Verifica se o hor√°rio est√° no futuro
        final agora = DateTime.now();
        final diferenca = notificationTime.difference(agora).inSeconds;
        debugPrint('‚è∞ Tempo restante: ${diferenca}s');

        if (diferenca <= 0) {
          debugPrint('‚ùå PROBLEMA: Notifica√ß√£o agendada para o passado!');
        } else if (diferenca > 15) {
          debugPrint(
              '‚ùå PROBLEMA: Notifica√ß√£o agendada muito longe (${diferenca}s)!');
        } else {
          debugPrint('‚úÖ Timing correto: ${diferenca}s no futuro');
        }
      } else {
        debugPrint('‚ùå ERRO: Teste de 10s N√ÉO est√° na lista pendente!');
        debugPrint('üìã Todas as pendentes:');
        for (final notif in pending) {
          debugPrint('  - ID: ${notif.id}, T√≠tulo: ${notif.title}');
        }
      }

      // Debug do sistema Android
      await debugAndroidSpecific();

      // TESTE ALTERNATIVO: Usar Timer para show() ap√≥s 10 segundos
      debugPrint('üîÑ === TESTE ALTERNATIVO COM TIMER ===');
      Timer(const Duration(seconds: 10), () async {
        debugPrint('‚è∞ Timer disparado! Enviando notifica√ß√£o imediata...');
        try {
          await _notifications.show(
            888888,
            '‚è∞ TIMER ANDROID 10s',
            'Esta notifica√ß√£o foi enviada via Timer ap√≥s 10s!',
            NotificationDetails(
              android: AndroidNotificationDetails(
                'immediate',
                'Notifica√ß√µes Imediatas',
                channelDescription: 'Notifica√ß√µes que aparecem imediatamente',
                importance: Importance.max,
                priority: Priority.max,
                icon: '@mipmap/ic_launcher',
                enableVibration: true,
                enableLights: true,
                playSound: true,
                vibrationPattern: Int64List.fromList([0, 1000, 500, 1000]),
                ledColor: Colors.green,
                ledOnMs: 2000,
                ledOffMs: 1000,
                category: AndroidNotificationCategory.alarm,
                visibility: NotificationVisibility.public,
                ticker: 'Timer Test',
                subText: 'Via Timer!',
              ),
            ),
            payload: 'timer_test',
          );
          debugPrint('‚úÖ Notifica√ß√£o via Timer enviada!');
        } catch (e) {
          debugPrint('‚ùå Erro na notifica√ß√£o via Timer: $e');
        }
      });
    } catch (e) {
      debugPrint('‚ùå ERRO CR√çTICO no teste Android 10s: $e');
      debugPrint('üí° Stack trace: ${StackTrace.current}');
    }

    debugPrint('ü§ñ === TESTE ANDROID 10 SEGUNDOS - FIM ===');
  }

  /// Testa notifica√ß√£o de estacionamento real no Android usando m√©todo que funciona
  Future<void> testAndroidParkingNotification({
    required int reminderMinutes,
    bool soundEnabled = true,
    bool vibrationEnabled = true,
    bool lightsEnabled = true,
  }) async {
    if (!Platform.isAndroid) {
      debugPrint('‚ö†Ô∏è Teste espec√≠fico apenas para Android');
      return;
    }

    debugPrint('üöó === TESTE ESTACIONAMENTO ANDROID (M√âTODO DIRETO) ===');

    try {
      // Garante inicializa√ß√£o
      await _ensureInitialized();

      // Verifica permiss√µes cr√≠ticas
      await _checkAndroidCriticalPermissions();

      // ‚úÖ CORRE√á√ÉO: Usar exatamente o mesmo m√©todo que funciona para 10s
      await _createOrUpdateNotificationChannel(
        'immediate',
        'Notifica√ß√µes Imediatas',
        'Notifica√ß√µes que aparecem imediatamente',
        soundEnabled: soundEnabled,
        vibrationEnabled: vibrationEnabled,
        lightsEnabled: lightsEnabled,
      );

      // Agenda para 2 minutos usando o m√©todo direto que funciona
      final now = DateTime.now();
      final notificationTime = now.add(const Duration(minutes: 2));
      const testId = 777777;

      debugPrint('üöó Agendando teste direto:');
      debugPrint('  - ID: $testId');
      debugPrint('  - Hor√°rio atual: ${now.hour}:${now.minute}:${now.second}');
      debugPrint(
          '  - Notifica√ß√£o em: ${notificationTime.hour}:${notificationTime.minute}:${notificationTime.second}');
      debugPrint(
          '  - Diferen√ßa: ${notificationTime.difference(now).inMinutes} minutos');

      await _notifications.zonedSchedule(
        testId,
        'üöó TESTE ESTACIONAMENTO 2min',
        'Notifica√ß√£o de estacionamento Android funcionando! üéâ',
        tz.TZDateTime.from(notificationTime, tz.local),
        NotificationDetails(
          android: AndroidNotificationDetails(
            'immediate', // Mesmo canal que funciona
            'Notifica√ß√µes Imediatas',
            channelDescription: 'Notifica√ß√µes que aparecem imediatamente',
            importance: Importance.max,
            priority: Priority.max,
            icon: '@mipmap/ic_launcher',
            enableVibration: vibrationEnabled,
            enableLights: lightsEnabled,
            playSound: soundEnabled,
            vibrationPattern: vibrationEnabled
                ? Int64List.fromList([0, 1000, 500, 1000])
                : null,
            ledColor: lightsEnabled ? Colors.orange : null,
            ledOnMs: lightsEnabled ? 2000 : null,
            ledOffMs: lightsEnabled ? 1000 : null,
            category: AndroidNotificationCategory.alarm,
            visibility: NotificationVisibility.public,
            autoCancel: false,
            ongoing: false,
            showWhen: true,
            when: notificationTime.millisecondsSinceEpoch,
            sound: null, // Usa som padr√£o do canal
            channelShowBadge: true,
            onlyAlertOnce: false,
            ticker: 'Teste Estacionamento 2min',
            subText: 'Funcionou!',
            timeoutAfter: null,
          ),
        ),
        payload: 'android_parking_2min_test',
        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,
      );

      debugPrint('‚úÖ Teste de 2 minutos agendado usando m√©todo que funciona!');

      // Verifica se foi agendada
      await Future.delayed(const Duration(milliseconds: 500));
      final pendingNotifications =
          await _notifications.pendingNotificationRequests();
      final scheduledNotification =
          pendingNotifications.where((n) => n.id == testId).isNotEmpty;

      debugPrint('üîç Verifica√ß√£o p√≥s-agendamento:');
      debugPrint('  - Total pendentes: ${pendingNotifications.length}');
      debugPrint('  - Teste 2min encontrado: $scheduledNotification');

      if (scheduledNotification) {
        debugPrint('‚úÖ CONFIRMADO: Teste de 2min est√° na lista pendente');
      } else {
        debugPrint('‚ùå PROBLEMA: Teste de 2min N√ÉO est√° na lista pendente');
      }
    } catch (e) {
      debugPrint('‚ùå ERRO no teste de estacionamento Android: $e');
      debugPrint('üí° Stack trace: ${StackTrace.current}');
    }

    debugPrint('üöó === FIM TESTE ESTACIONAMENTO ANDROID ===');
  }

  /// Teste simples de 30 segundos para verificar se √© problema de tempo
  Future<void> testAndroid30Seconds() async {
    if (!Platform.isAndroid) return;

    debugPrint('‚è±Ô∏è === TESTE ANDROID 30 SEGUNDOS ===');

    // ‚úÖ Cancela notifica√ß√µes de teste antigas primeiro
    try {
      await _notifications.cancel(666666); // ID do teste de 30s
      await _notifications.cancel(555555); // ID do fallback
      debugPrint('üßπ Notifica√ß√µes antigas de teste canceladas');
    } catch (e) {
      debugPrint('‚ö†Ô∏è Erro ao cancelar notifica√ß√µes antigas: $e');
    }

    try {
      await _ensureInitialized();

      await _createOrUpdateNotificationChannel(
        'immediate',
        'Notifica√ß√µes Imediatas',
        'Notifica√ß√µes que aparecem imediatamente',
        soundEnabled: true,
        vibrationEnabled: true,
        lightsEnabled: true,
      );

      final now = DateTime.now();
      final notificationTime = now.add(const Duration(seconds: 30));
      const testId = 666666;

      debugPrint('‚è±Ô∏è Agendando para 30 segundos...');
      debugPrint('  - Hor√°rio atual: ${now.hour}:${now.minute}:${now.second}');
      debugPrint(
          '  - Hor√°rio target: ${notificationTime.hour}:${notificationTime.minute}:${notificationTime.second}');

      // ‚úÖ CORRE√á√ÉO: Usar abordagem mais direta para timezone
      final tzNotificationTime =
          tz.TZDateTime.now(tz.local).add(const Duration(seconds: 30));

      debugPrint('  - TZDateTime.now(): ${tz.TZDateTime.now(tz.local)}');
      debugPrint('  - TZDateTime target: $tzNotificationTime');
      debugPrint(
          '  - Diferen√ßa: ${tzNotificationTime.difference(tz.TZDateTime.now(tz.local)).inSeconds} segundos');
      debugPrint('  - Timezone: ${tz.local}');

      await _notifications.zonedSchedule(
        testId,
        '‚è±Ô∏è TESTE 30s',
        'Teste de 30 segundos funcionou!',
        tzNotificationTime,
        const NotificationDetails(
          android: AndroidNotificationDetails(
            'immediate',
            'Notifica√ß√µes Imediatas',
            channelDescription: 'Notifica√ß√µes que aparecem imediatamente',
            importance: Importance.max,
            priority: Priority.max,
            icon: '@mipmap/ic_launcher',
            enableVibration: true,
            enableLights: true,
            playSound: true,
            category: AndroidNotificationCategory.alarm,
            visibility: NotificationVisibility.public,
          ),
        ),
        payload: 'test_30s',
        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,
      );

      debugPrint('‚úÖ Teste de 30s agendado!');

      // ‚úÖ Verifica se foi realmente agendado
      await Future.delayed(const Duration(milliseconds: 500));
      final pendingNotifications =
          await _notifications.pendingNotificationRequests();
      final scheduledNotification =
          pendingNotifications.where((n) => n.id == testId).isNotEmpty;

      debugPrint('üîç Verifica√ß√£o p√≥s-agendamento 30s:');
      debugPrint('  - Total pendentes: ${pendingNotifications.length}');
      debugPrint('  - Teste 30s encontrado: $scheduledNotification');

      if (!scheduledNotification) {
        debugPrint('‚ùå PROBLEMA: Teste de 30s N√ÉO foi agendado corretamente');
      }

      // ‚úÖ FALLBACK: Timer para garantir que funcione
      Timer(const Duration(seconds: 30), () async {
        debugPrint('‚è∞ Timer 30s disparado! Enviando notifica√ß√£o imediata...');
        try {
          await _notifications.show(
            555555, // ID diferente para fallback
            '‚è∞ TESTE 30s',
            'Notifica√ß√£o de 30 segundos funcionou!',
            const NotificationDetails(
              android: AndroidNotificationDetails(
                'immediate',
                'Notifica√ß√µes Imediatas',
                channelDescription: 'Notifica√ß√µes que aparecem imediatamente',
                importance: Importance.max,
                priority: Priority.max,
                icon: '@mipmap/ic_launcher',
                enableVibration: true,
                enableLights: true,
                playSound: true,
                category: AndroidNotificationCategory.alarm,
                visibility: NotificationVisibility.public,
              ),
            ),
            payload: 'test_30s_timer',
          );
          debugPrint('‚úÖ Notifica√ß√£o via Timer 30s enviada!');
        } catch (e) {
          debugPrint('‚ùå Erro na notifica√ß√£o via Timer 30s: $e');
        }
      });
    } catch (e) {
      debugPrint('‚ùå ERRO no teste de 30s: $e');
    }
  }

  /// Verifica permiss√µes cr√≠ticas para Android
  Future<void> _checkAndroidCriticalPermissions() async {
    debugPrint('üîê === VERIFICANDO PERMISS√ïES CR√çTICAS ===');

    final notificationStatus = await Permission.notification.status;
    final exactAlarmStatus = await Permission.scheduleExactAlarm.status;
    final batteryStatus = await Permission.ignoreBatteryOptimizations.status;

    debugPrint('  - Notifica√ß√£o: $notificationStatus');
    debugPrint('  - Alarme Exato: $exactAlarmStatus');
    debugPrint('  - Ignorar Bateria: $batteryStatus');

    // Solicita permiss√µes se necess√°rio
    if (notificationStatus.isDenied) {
      debugPrint('‚ö†Ô∏è Solicitando permiss√£o de notifica√ß√£o...');
      await Permission.notification.request();
    }

    if (exactAlarmStatus.isDenied) {
      debugPrint('‚ö†Ô∏è Solicitando permiss√£o de alarme exato...');
      await Permission.scheduleExactAlarm.request();
    }

    if (batteryStatus.isDenied) {
      debugPrint(
          '‚ö†Ô∏è Solicitando permiss√£o para ignorar otimiza√ß√µes de bateria...');
      await Permission.ignoreBatteryOptimizations.request();
    }

    // Verifica novamente ap√≥s solicitar
    final newNotificationStatus = await Permission.notification.status;
    final newExactAlarmStatus = await Permission.scheduleExactAlarm.status;
    final newBatteryStatus = await Permission.ignoreBatteryOptimizations.status;

    debugPrint('üîê === STATUS FINAL DAS PERMISS√ïES ===');
    debugPrint('  - Notifica√ß√£o: $newNotificationStatus');
    debugPrint('  - Alarme Exato: $newExactAlarmStatus');
    debugPrint('  - Ignorar Bateria: $newBatteryStatus');

    if (!newNotificationStatus.isGranted) {
      debugPrint('‚ùå CR√çTICO: Permiss√£o de notifica√ß√£o negada!');
    }
    if (!newExactAlarmStatus.isGranted) {
      debugPrint('‚ùå CR√çTICO: Permiss√£o de alarme exato negada!');
    }
    if (!newBatteryStatus.isGranted) {
      debugPrint(
          '‚ö†Ô∏è AVISO: Otimiza√ß√µes de bateria ativas - pode impedir notifica√ß√µes!');
    }
  }

  /// For√ßa teste espec√≠fico para Android com debugging extenso
  Future<void> forceAndroidScheduledTest({
    required int reminderMinutes,
    bool soundEnabled = true,
    bool vibrationEnabled = true,
    bool lightsEnabled = true,
  }) async {
    if (!Platform.isAndroid) {
      debugPrint('‚ö†Ô∏è Teste espec√≠fico apenas para Android');
      return;
    }

    debugPrint('ü§ñ === INICIANDO TESTE FOR√áADO ANDROID ===');

    // Verifica estado do sistema
    await debugAndroidSpecific();

    // Calcula tempos
    final now = DateTime.now();
    final expirationTime =
        now.add(Duration(minutes: reminderMinutes, seconds: 10));
    final notificationTime =
        expirationTime.subtract(Duration(minutes: reminderMinutes));

    debugPrint('‚è∞ Tempos calculados:');
    debugPrint('  - Agora: ${now.hour}:${now.minute}:${now.second}');
    debugPrint(
        '  - Expira: ${expirationTime.hour}:${expirationTime.minute}:${expirationTime.second}');
    debugPrint(
        '  - Notifica: ${notificationTime.hour}:${notificationTime.minute}:${notificationTime.second}');
    debugPrint(
        '  - Segundos at√© notifica√ß√£o: ${notificationTime.difference(now).inSeconds}');

    // For√ßa cria√ß√£o do canal
    await _createOrUpdateNotificationChannel(
      'android_force_test',
      'Teste For√ßado Android',
      'Canal para teste for√ßado no Android',
      soundEnabled: soundEnabled,
      vibrationEnabled: vibrationEnabled,
      lightsEnabled: lightsEnabled,
    );

    // Verifica permiss√µes
    final notificationPermission = await Permission.notification.status;
    final exactAlarmPermission = await Permission.scheduleExactAlarm.status;
    final batteryPermission =
        await Permission.ignoreBatteryOptimizations.status;

    debugPrint('üîê Status das permiss√µes:');
    debugPrint('  - Notifica√ß√£o: $notificationPermission');
    debugPrint('  - Alarme exato: $exactAlarmPermission');
    debugPrint('  - Ignorar bateria: $batteryPermission');

    final canScheduleExact = exactAlarmPermission.isGranted;

    try {
      // Agenda com configura√ß√µes m√°ximas para Android
      await _notifications.zonedSchedule(
        888888, // ID √∫nico para teste for√ßado
        'ü§ñ TESTE FOR√áADO ANDROID',
        'Esta notifica√ß√£o deve aparecer em ${notificationTime.difference(now).inSeconds} segundos (${reminderMinutes}min antes do vencimento)',
        tz.TZDateTime.from(notificationTime, tz.local),
        NotificationDetails(
          android: AndroidNotificationDetails(
            'android_force_test',
            'Teste For√ßado Android',
            channelDescription: 'Canal para teste for√ßado no Android',
            importance: Importance.max,
            priority: Priority.max,
            icon: '@mipmap/ic_launcher',
            enableVibration: vibrationEnabled,
            enableLights: lightsEnabled,
            playSound: soundEnabled,
            // Configura√ß√µes extras para for√ßar funcionamento
            vibrationPattern: vibrationEnabled
                ? Int64List.fromList([0, 500, 250, 500])
                : null,
            ledColor: lightsEnabled ? Colors.red : null,
            ledOnMs: lightsEnabled ? 1000 : null,
            ledOffMs: lightsEnabled ? 500 : null,
            category: AndroidNotificationCategory.alarm,
            visibility: NotificationVisibility.public,
            autoCancel: false, // N√£o remove automaticamente
            ongoing: false,
            showWhen: true,
            when: notificationTime.millisecondsSinceEpoch,
            usesChronometer: false,
            chronometerCountDown: false,
            // For√ßa som e vibra√ß√£o (usa som padr√£o do sistema)
            sound: null, // null usa o som padr√£o do canal
          ),
        ),
        payload: 'android_force_test:TESTE123',
        androidScheduleMode: canScheduleExact
            ? AndroidScheduleMode.exactAllowWhileIdle
            : AndroidScheduleMode.inexactAllowWhileIdle,
      );

      debugPrint('‚úÖ Teste for√ßado agendado com sucesso!');

      // Verifica se foi agendado
      await Future.delayed(const Duration(seconds: 1));
      final pending = await _notifications.pendingNotificationRequests();
      final testNotification = pending.where((n) => n.id == 888888).toList();

      debugPrint('üìä Verifica√ß√£o p√≥s-agendamento:');
      debugPrint('  - Total pendentes: ${pending.length}');
      debugPrint('  - Teste encontrado: ${testNotification.length}');

      if (testNotification.isNotEmpty) {
        final notification = testNotification.first;
        debugPrint('‚úÖ CONFIRMADO: Teste est√° na lista de pendentes');
        debugPrint('  - ID: ${notification.id}');
        debugPrint('  - T√≠tulo: ${notification.title}');
        debugPrint('  - Corpo: ${notification.body}');
      } else {
        debugPrint('‚ùå PROBLEMA CR√çTICO: Teste N√ÉO est√° na lista de pendentes!');

        // Lista todas as pendentes para debug
        debugPrint('üìã Todas as notifica√ß√µes pendentes:');
        for (final notification in pending) {
          debugPrint(
              '  - ID: ${notification.id}, T√≠tulo: ${notification.title}');
        }
      }
    } catch (e) {
      debugPrint('‚ùå ERRO CR√çTICO no teste for√ßado: $e');
      debugPrint('üí° Stack trace: ${StackTrace.current}');
    }

    debugPrint('ü§ñ === FIM TESTE FOR√áADO ANDROID ===');
  }

  /// Cria ou atualiza um canal de notifica√ß√£o com configura√ß√µes espec√≠ficas
  Future<void> _createOrUpdateNotificationChannel(
    String channelId,
    String channelName,
    String channelDescription, {
    bool soundEnabled = true,
    bool vibrationEnabled = true,
    bool lightsEnabled = true,
  }) async {
    debugPrint('üîî Criando/atualizando canal: $channelId');
    debugPrint('  - Som: $soundEnabled');
    debugPrint('  - Vibra√ß√£o: $vibrationEnabled');
    debugPrint('  - Luzes: $lightsEnabled');

    await _notifications
        .resolvePlatformSpecificImplementation<
            AndroidFlutterLocalNotificationsPlugin>()
        ?.createNotificationChannel(
          AndroidNotificationChannel(
            channelId,
            channelName,
            description: channelDescription,
            importance: Importance
                .max, // ‚úÖ Import√¢ncia m√°xima para garantir som e vibra√ß√£o
            enableVibration: vibrationEnabled,
            enableLights: lightsEnabled,
            playSound: soundEnabled,
            showBadge: true,
            // ‚úÖ Configura√ß√µes adicionais para garantir funcionamento (usa som padr√£o)
            sound: null, // null usa o som padr√£o do canal
          ),
        );

    debugPrint('üîî Canal $channelId criado/atualizado com sucesso');
  }
}

/// Provider para o servi√ßo de notifica√ß√µes locais
final localNotificationServiceProvider =
    Provider<LocalNotificationService>((ref) {
  return LocalNotificationService();
});
