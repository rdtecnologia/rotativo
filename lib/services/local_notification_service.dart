import 'dart:async';
import 'dart:io';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:timezone/timezone.dart' as tz;
import 'package:timezone/data/latest.dart' as tz;
import 'package:flutter_riverpod/flutter_riverpod.dart';

/// Servi√ßo para gerenciar notifica√ß√µes locais
class LocalNotificationService {
  static final LocalNotificationService _instance =
      LocalNotificationService._internal();
  factory LocalNotificationService() => _instance;
  LocalNotificationService._internal();

  final FlutterLocalNotificationsPlugin _notifications =
      FlutterLocalNotificationsPlugin();

  /// Inicializa o servi√ßo de notifica√ß√µes
  Future<void> initialize() async {
    try {
      // Inicializa timezone
      tz.initializeTimeZones();

      // Aguarda um momento para garantir que o banco de dados seja carregado
      await Future.delayed(const Duration(milliseconds: 200));

      // Define timezone padr√£o para Brasil
      tz.setLocalLocation(tz.getLocation('America/Sao_Paulo'));

      debugPrint('üåç Timezone inicializado: America/Sao_Paulo');

      // Configura√ß√£o para Android
      const androidSettings =
          AndroidInitializationSettings('@mipmap/ic_launcher');

      // Configura√ß√£o para iOS
      const iosSettings = DarwinInitializationSettings(
        requestAlertPermission: true,
        requestBadgePermission: true,
        requestSoundPermission: true,
        // ‚úÖ Configura√ß√µes adicionais para iOS
        defaultPresentAlert: true,
        defaultPresentBadge: true,
        defaultPresentSound: true,
        // ‚úÖ Configura√ß√µes para emulador
        notificationCategories: [],
      );

      // Configura√ß√£o inicial
      const initSettings = InitializationSettings(
        android: androidSettings,
        iOS: iosSettings,
      );

      // Inicializa o plugin
      await _notifications.initialize(
        initSettings,
        onDidReceiveNotificationResponse: _onNotificationTapped,
      );

      // Solicita permiss√µes
      await _requestPermissions();

      debugPrint('üîî Servi√ßo de notifica√ß√µes inicializado com sucesso');
    } catch (e) {
      debugPrint('‚ùå Erro ao inicializar servi√ßo de notifica√ß√µes: $e');
      rethrow;
    }
  }

  /// Solicita permiss√µes necess√°rias
  Future<void> _requestPermissions() async {
    try {
      // Para Android 13+ (API 33+)
      if (await Permission.notification.isDenied) {
        final status = await Permission.notification.request();
        debugPrint('üîî Permiss√£o de notifica√ß√£o: $status');
      }

      // Para Android 12+ (API 31+): Verifica permiss√£o de alarmes exatos
      if (await Permission.scheduleExactAlarm.isDenied) {
        final status = await Permission.scheduleExactAlarm.request();
        debugPrint('üîî Permiss√£o de alarme exato: $status');
      }

      debugPrint('üîî Status das permiss√µes:');
      debugPrint('  - Notifica√ß√£o: ${await Permission.notification.status}');
      debugPrint(
          '  - Alarme Exato: ${await Permission.scheduleExactAlarm.status}');
    } catch (e) {
      debugPrint('‚ö†Ô∏è Erro ao solicitar permiss√µes: $e');
    }
  }

  /// Callback quando uma notifica√ß√£o √© tocada
  void _onNotificationTapped(NotificationResponse response) {
    debugPrint('üîî Notifica√ß√£o tocada: ${response.payload}');
    // TODO: Implementar navega√ß√£o baseada no payload
  }

  /// Agenda uma notifica√ß√£o de vencimento de estacionamento
  Future<void> scheduleParkingExpirationNotification({
    required String licensePlate,
    required DateTime expirationTime,
    required int reminderMinutes,
    String? location,
    bool? soundEnabled,
    bool? vibrationEnabled,
    bool? lightsEnabled,
  }) async {
    // Calcula o hor√°rio da notifica√ß√£o
    final notificationTime =
        expirationTime.subtract(Duration(minutes: reminderMinutes));

    // Se o hor√°rio j√° passou, n√£o agenda
    if (notificationTime.isBefore(DateTime.now())) {
      debugPrint('‚è∞ Hor√°rio de notifica√ß√£o j√° passou para $licensePlate');
      return;
    }

    // Cria ou atualiza o canal de notifica√ß√£o com as configura√ß√µes
    await _createOrUpdateNotificationChannel(
      'parking_expiration',
      'Vencimento de Estacionamento',
      'Notifica√ß√µes sobre vencimento de estacionamento',
      soundEnabled: soundEnabled ?? true,
      vibrationEnabled: vibrationEnabled ?? true,
      lightsEnabled: lightsEnabled ?? true,
    );

    // ID √∫nico para a notifica√ß√£o
    final notificationId =
        _generateNotificationId(licensePlate, reminderMinutes);

    // Calcula o delay at√© a notifica√ß√£o
    final delay = notificationTime.difference(DateTime.now());

    debugPrint('üîî Agendando notifica√ß√£o para $licensePlate:');
    debugPrint('  - Expira √†s: ${expirationTime.toString()}');
    debugPrint('  - Notifica√ß√£o em: $reminderMinutes minutos');
    debugPrint('  - Delay: ${delay.inSeconds} segundos');

    // Solu√ß√£o robusta: usa Timer.delayed para garantir funcionamento
    Timer(delay, () async {
      try {
        await _notifications.show(
          notificationId,
          'Estacionamento expirando',
          'O estacionamento do ve√≠culo $licensePlate expira em $reminderMinutes minutos${location != null ? ' em $location' : ''}',
          NotificationDetails(
            android: AndroidNotificationDetails(
              'parking_expiration',
              'Vencimento de Estacionamento',
              channelDescription:
                  'Notifica√ß√µes sobre vencimento de estacionamento',
              importance: Importance.max,
              priority: Priority.max,
              color: Colors.orange,
              icon: 'ic_notification',
              // Configura√ß√µes espec√≠ficas para garantir som e vibra√ß√£o
              enableVibration: vibrationEnabled ?? true,
              enableLights: lightsEnabled ?? true,
              playSound: soundEnabled ?? true,
              // Configura√ß√µes adicionais para garantir funcionamento
              vibrationPattern: vibrationEnabled == true
                  ? Int64List.fromList([0, 250, 250, 250])
                  : null,
              ledColor: lightsEnabled == true ? Colors.blue : null,
              ledOnMs: lightsEnabled == true ? 1000 : null,
              ledOffMs: lightsEnabled == true ? 1000 : null,
            ),
            iOS: DarwinNotificationDetails(
              presentAlert: true,
              presentBadge: true,
              presentSound: true,
              // ‚úÖ Configura√ß√µes adicionais para iOS
              badgeNumber: 1,
              threadIdentifier: 'parking_notifications',
              categoryIdentifier: 'parking_expiration',
              // ‚úÖ Configura√ß√µes para emulador
              interruptionLevel: InterruptionLevel.active,
            ),
          ),
          payload:
              'parking_expiration:$licensePlate:${expirationTime.toIso8601String()}',
        );

        debugPrint(
            'üîî Notifica√ß√£o de estacionamento exibida para $licensePlate!');
      } catch (e) {
        debugPrint(
            '‚ùå Erro ao exibir notifica√ß√£o de estacionamento para $licensePlate: $e');
      }
    });

    debugPrint(
        'üîî Timer de notifica√ß√£o configurado para $licensePlate em ${delay.inSeconds} segundos');
  }

  /// Cancela todas as notifica√ß√µes de um ve√≠culo espec√≠fico
  Future<void> cancelVehicleNotifications(String licensePlate) async {
    // Cancela notifica√ß√µes com IDs que cont√™m a placa
    final pendingNotifications =
        await _notifications.pendingNotificationRequests();

    for (final notification in pendingNotifications) {
      if (notification.payload?.contains(licensePlate) == true) {
        await _notifications.cancel(notification.id);
        debugPrint(
            'üîî Notifica√ß√£o cancelada para $licensePlate (ID: ${notification.id})');
      }
    }
  }

  /// Cancela todas as notifica√ß√µes
  Future<void> cancelAllNotifications() async {
    await _notifications.cancelAll();
    debugPrint('üîî Todas as notifica√ß√µes foram canceladas');
  }

  /// Mostra uma notifica√ß√£o imediata (para testes)
  Future<void> showImmediateNotification({
    required String title,
    required String body,
    String? payload,
    bool? soundEnabled,
    bool? vibrationEnabled,
    bool? lightsEnabled,
  }) async {
    try {
      // ‚úÖ Verifica√ß√£o espec√≠fica para iOS
      if (Platform.isIOS) {
        debugPrint('üçé iOS detectado - Configurando notifica√ß√µes espec√≠ficas');

        // Para iOS, vamos usar configura√ß√µes mais simples
        await _notifications.show(
          DateTime.now().millisecondsSinceEpoch ~/ 1000,
          title,
          body,
          NotificationDetails(
            iOS: DarwinNotificationDetails(
              presentAlert: true,
              presentBadge: true,
              presentSound: true,
              // ‚úÖ Configura√ß√µes espec√≠ficas para iOS
              badgeNumber: 1,
              threadIdentifier: 'immediate_notifications',
              categoryIdentifier: 'immediate',
              // ‚úÖ Configura√ß√µes para emulador
              interruptionLevel: InterruptionLevel.active,
            ),
          ),
          payload: payload,
        );

        debugPrint('üçé Notifica√ß√£o iOS enviada com sucesso');

        // ‚úÖ Para emulador iOS, vamos aguardar um pouco e verificar se apareceu
        await Future.delayed(const Duration(seconds: 2));

        // ‚úÖ Se estiver no emulador, vamos mostrar um log adicional
        if (kDebugMode) {
          debugPrint(
              'üçé Emulador iOS detectado - Verifique o Centro de Notifica√ß√µes');
          debugPrint(
              'üçé Dica: Puxe para baixo no topo da tela para ver notifica√ß√µes');
        }

        return;
      }

      // Cria ou atualiza o canal de notifica√ß√£o com as configura√ß√µes
      await _createOrUpdateNotificationChannel(
        'immediate',
        'Notifica√ß√µes Imediatas',
        'Notifica√ß√µes que aparecem imediatamente',
        soundEnabled: soundEnabled ?? true,
        vibrationEnabled: vibrationEnabled ?? true,
        lightsEnabled: lightsEnabled ?? true,
      );

      debugPrint('üîî Enviando notifica√ß√£o imediata:');
      debugPrint('  - Som: $soundEnabled');
      debugPrint('  - Vibra√ß√£o: $vibrationEnabled');
      debugPrint('  - Luzes: $lightsEnabled');

      await _notifications.show(
        DateTime.now().millisecondsSinceEpoch ~/ 1000,
        title,
        body,
        NotificationDetails(
          android: AndroidNotificationDetails(
            'immediate',
            'Notifica√ß√µes Imediatas',
            channelDescription: 'Notifica√ß√µes que aparecem imediatamente',
            importance: Importance.max, // ‚úÖ Import√¢ncia m√°xima
            priority: Priority.max, // ‚úÖ Prioridade m√°xima
            // Configura √≠cone expl√≠cito para evitar NullPointerException
            icon: 'ic_notification',
            // ‚úÖ Configura√ß√µes espec√≠ficas da notifica√ß√£o
            enableVibration: vibrationEnabled ?? true,
            enableLights: lightsEnabled ?? true,
            playSound: soundEnabled ?? true,
          ),
          iOS: DarwinNotificationDetails(
            presentAlert: true,
            presentBadge: true,
            presentSound: true,
            // ‚úÖ Configura√ß√µes adicionais para iOS
            badgeNumber: 1,
            threadIdentifier: 'immediate_notifications',
            categoryIdentifier: 'immediate',
            // ‚úÖ Configura√ß√µes para emulador
            interruptionLevel: InterruptionLevel.active,
          ),
        ),
        payload: payload,
      );

      debugPrint('üîî Notifica√ß√£o imediata enviada com sucesso');
    } catch (e) {
      debugPrint('‚ùå Erro ao enviar notifica√ß√£o imediata: $e');
    }
  }

  /// Lista todas as notifica√ß√µes pendentes
  Future<List<PendingNotificationRequest>> getPendingNotifications() async {
    return await _notifications.pendingNotificationRequests();
  }

  /// Verifica se as notifica√ß√µes est√£o habilitadas
  Future<bool> areNotificationsEnabled() async {
    final androidEnabled = await _notifications
        .resolvePlatformSpecificImplementation<
            AndroidFlutterLocalNotificationsPlugin>()
        ?.areNotificationsEnabled();

    // Para iOS, assume que est√° habilitado se n√£o h√° erro
    const iosEnabled = true;

    return androidEnabled ?? iosEnabled;
  }

  /// Gera um ID √∫nico para a notifica√ß√£o
  int _generateNotificationId(String licensePlate, int reminderMinutes) {
    // Combina hash da placa com os minutos para criar um ID √∫nico
    final hash = licensePlate.hashCode;
    final minutesHash = reminderMinutes.hashCode;
    return (hash + minutesHash).abs() % 2147483647; // Max int32
  }

  /// Agenda notifica√ß√£o de teste
  Future<void> scheduleTestNotification({
    bool? soundEnabled,
    bool? vibrationEnabled,
    bool? lightsEnabled,
  }) async {
    // Verifica permiss√µes antes de agendar
    final notificationPermission = await Permission.notification.status;
    final exactAlarmPermission = await Permission.scheduleExactAlarm.status;

    debugPrint('üîî Verificando permiss√µes antes do teste:');
    debugPrint('  - Notifica√ß√£o: $notificationPermission');
    debugPrint('  - Alarme Exato: $exactAlarmPermission');

    // Cria ou atualiza o canal de notifica√ß√£o com as configura√ß√µes
    await _createOrUpdateNotificationChannel(
      'test',
      'Teste',
      'Notifica√ß√µes de teste',
      soundEnabled: soundEnabled ?? true,
      vibrationEnabled: vibrationEnabled ?? true,
      lightsEnabled: lightsEnabled ?? true,
    );

    debugPrint('üß™ Agendando notifica√ß√£o de teste para 5 segundos...');
    debugPrint(
        'üß™ Configura√ß√µes: Som=$soundEnabled, Vibra√ß√£o=$vibrationEnabled, Luzes=$lightsEnabled');

    // Solu√ß√£o mais robusta: usa Timer.delayed para garantir que funcione
    Timer(const Duration(seconds: 5), () async {
      try {
        await _notifications.show(
          999999, // ID de teste
          'Teste de Notifica√ß√£o',
          'Esta √© uma notifica√ß√£o de teste!',
          NotificationDetails(
            android: AndroidNotificationDetails(
              'test',
              'Teste',
              channelDescription: 'Notifica√ß√µes de teste',
              importance: Importance.max,
              priority: Priority.max,
              icon: 'ic_notification',
              // ‚úÖ Configura√ß√µes espec√≠ficas para garantir som e vibra√ß√£o
              enableVibration: vibrationEnabled ?? true,
              enableLights: lightsEnabled ?? true,
              playSound: soundEnabled ?? true,
              // ‚úÖ Configura√ß√µes adicionais para garantir funcionamento
              vibrationPattern: vibrationEnabled == true
                  ? Int64List.fromList([0, 250, 250, 250])
                  : null,
              ledColor: lightsEnabled == true ? Colors.blue : null,
              ledOnMs: lightsEnabled == true ? 1000 : null,
              ledOffMs: lightsEnabled == true ? 1000 : null,
              // ‚úÖ Configura√ß√µes adicionais para for√ßar som e vibra√ß√£o
              showWhen: true,
              when: DateTime.now().millisecondsSinceEpoch,
              usesChronometer: false,
              chronometerCountDown: false,
              category: AndroidNotificationCategory.message,
              visibility: NotificationVisibility.public,
            ),
            iOS: DarwinNotificationDetails(
              presentAlert: true,
              presentBadge: true,
              presentSound: true,
              // ‚úÖ Configura√ß√µes adicionais para iOS
              badgeNumber: 1,
              threadIdentifier: 'test_notifications',
              categoryIdentifier: 'test',
              // ‚úÖ Configura√ß√µes para emulador
              interruptionLevel: InterruptionLevel.active,
            ),
          ),
          payload: 'test',
        );

        debugPrint('üß™ Notifica√ß√£o de teste exibida com sucesso!');
        debugPrint(
            'üß™ Configura√ß√µes aplicadas: Som=$soundEnabled, Vibra√ß√£o=$vibrationEnabled, Luzes=$lightsEnabled');
      } catch (e) {
        debugPrint('‚ùå Erro ao exibir notifica√ß√£o de teste: $e');
      }
    });

    debugPrint('üß™ Timer de teste configurado para 5 segundos');
  }

  /// Testa notifica√ß√µes espec√≠ficas para iOS
  Future<void> testIOSNotification() async {
    if (!Platform.isIOS) return;

    debugPrint('üçé Testando notifica√ß√£o espec√≠fica para iOS...');

    try {
      // ‚úÖ Configura√ß√£o espec√≠fica para iOS
      await _notifications.show(
        999, // ID fixo para teste
        'üçé Teste iOS',
        'Esta √© uma notifica√ß√£o de teste espec√≠fica para iOS',
        NotificationDetails(
          iOS: DarwinNotificationDetails(
            presentAlert: true,
            presentBadge: true,
            presentSound: true,
            badgeNumber: 999,
            threadIdentifier: 'ios_test',
            categoryIdentifier: 'test',
            interruptionLevel: InterruptionLevel.active,
          ),
        ),
        payload: 'ios_test_notification',
      );

      debugPrint('üçé Notifica√ß√£o de teste iOS enviada com sucesso');
      debugPrint(
          'üçé Verifique o Centro de Notifica√ß√µes (puxe para baixo no topo)');
    } catch (e) {
      debugPrint('‚ùå Erro ao enviar notifica√ß√£o de teste iOS: $e');
    }
  }

  /// Cria ou atualiza um canal de notifica√ß√£o com configura√ß√µes espec√≠ficas
  Future<void> _createOrUpdateNotificationChannel(
    String channelId,
    String channelName,
    String channelDescription, {
    bool soundEnabled = true,
    bool vibrationEnabled = true,
    bool lightsEnabled = true,
  }) async {
    debugPrint('üîî Criando/atualizando canal: $channelId');
    debugPrint('  - Som: $soundEnabled');
    debugPrint('  - Vibra√ß√£o: $vibrationEnabled');
    debugPrint('  - Luzes: $lightsEnabled');

    await _notifications
        .resolvePlatformSpecificImplementation<
            AndroidFlutterLocalNotificationsPlugin>()
        ?.createNotificationChannel(
          AndroidNotificationChannel(
            channelId,
            channelName,
            description: channelDescription,
            importance: Importance
                .max, // ‚úÖ Import√¢ncia m√°xima para garantir som e vibra√ß√£o
            enableVibration: vibrationEnabled,
            enableLights: lightsEnabled,
            // ‚úÖ N√£o especifica som espec√≠fico - deixa a notifica√ß√£o individual controlar
            sound: null,
          ),
        );

    debugPrint('üîî Canal $channelId criado/atualizado com sucesso');
  }
}

/// Provider para o servi√ßo de notifica√ß√µes locais
final localNotificationServiceProvider =
    Provider<LocalNotificationService>((ref) {
  return LocalNotificationService();
});
