import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../models/history_models.dart';
import '../providers/active_activations_provider.dart';
import '../providers/alarm_settings_provider.dart';
import 'local_notification_service.dart';
import 'dart:async';

/// Servi√ßo para gerenciar notifica√ß√µes de estacionamento
class ParkingNotificationService {
  static final ParkingNotificationService _instance =
      ParkingNotificationService._internal();
  factory ParkingNotificationService() => _instance;
  ParkingNotificationService._internal();

  final LocalNotificationService _localNotificationService =
      LocalNotificationService();

  /// Inicializa o servi√ßo
  Future<void> initialize() async {
    await _localNotificationService.initialize();
  }

  /// Agenda notifica√ß√µes para todas as ativa√ß√µes ativas
  Future<void> scheduleNotificationsForActiveActivations(
    Map<String, ActivationHistory> activations,
    AlarmSettings settings,
  ) async {
    if (!settings.localNotificationsEnabled) {
      debugPrint('üîî Notifica√ß√µes locais desabilitadas');
      return;
    }

    for (final entry in activations.entries) {
      final activation = entry.value;

      if (activation.isActive) {
        await _scheduleNotificationForActivation(activation, settings);
      }
    }
  }

  /// Agenda notifica√ß√£o para uma ativa√ß√£o espec√≠fica
  Future<void> _scheduleNotificationForActivation(
    ActivationHistory activation,
    AlarmSettings settings,
  ) async {
    if (!settings.parkingExpiration) {
      debugPrint(
          'üîî Notifica√ß√µes de vencimento desabilitadas para ${activation.licensePlate}');
      return;
    }

    // Calcula o hor√°rio de expira√ß√£o
    final expirationTime = activation.expiresAt ??
        activation.activatedAt.add(Duration(minutes: activation.parkingTime));

    // Agenda a notifica√ß√£o
    await _localNotificationService.scheduleParkingExpirationNotification(
      licensePlate: activation.licensePlate,
      expirationTime: expirationTime,
      reminderMinutes: settings.reminderMinutes,
      location: activation.location,
      soundEnabled: settings.soundEnabled,
      vibrationEnabled: settings.vibrationEnabled,
      lightsEnabled: settings.lightsEnabled,
    );

    debugPrint(
        'üîî Notifica√ß√£o agendada para ${activation.licensePlate} √†s ${expirationTime.toString()}');
  }

  /// Cancela notifica√ß√µes para um ve√≠culo espec√≠fico
  Future<void> cancelNotificationsForVehicle(String licensePlate) async {
    await _localNotificationService.cancelVehicleNotifications(licensePlate);
    debugPrint('üîî Notifica√ß√µes canceladas para $licensePlate');
  }

  /// Cancela todas as notifica√ß√µes de estacionamento
  Future<void> cancelAllParkingNotifications() async {
    await _localNotificationService.cancelAllNotifications();
    debugPrint('üîî Todas as notifica√ß√µes de estacionamento foram canceladas');
  }

  /// Atualiza notifica√ß√µes quando as configura√ß√µes mudam
  Future<void> updateNotificationsOnSettingsChange(
    Map<String, ActivationHistory> activations,
    AlarmSettings settings,
  ) async {
    // Cancela todas as notifica√ß√µes existentes
    await cancelAllParkingNotifications();

    // Agenda novas notifica√ß√µes com as configura√ß√µes atualizadas
    await scheduleNotificationsForActiveActivations(activations, settings);
  }

  /// Verifica se h√° ativa√ß√µes pr√≥ximas de expirar e agenda notifica√ß√µes
  Future<void> checkAndScheduleNotifications(
    Map<String, ActivationHistory> activations,
    AlarmSettings settings,
  ) async {
    if (!settings.localNotificationsEnabled || !settings.parkingExpiration) {
      debugPrint('üîî Notifica√ß√µes desabilitadas ou configura√ß√µes inv√°lidas');
      return;
    }

    debugPrint(
        'üîî Verificando ${activations.length} ativa√ß√µes para agendar notifica√ß√µes');

    for (final entry in activations.entries) {
      final activation = entry.value;

      if (!activation.isActive) {
        debugPrint(
            'üîî Ativa√ß√£o ${activation.licensePlate} n√£o est√° ativa, pulando...');
        continue;
      }

      // Agenda notifica√ß√£o imediatamente para ativa√ß√µes ativas
      await _scheduleNotificationForActivation(activation, settings);
    }
  }
}

/// Provider para o servi√ßo de notifica√ß√µes de estacionamento
final parkingNotificationServiceProvider =
    Provider<ParkingNotificationService>((ref) {
  return ParkingNotificationService();
});

/// Widget para monitorar ativa√ß√µes e agendar notifica√ß√µes automaticamente
class ParkingNotificationMonitor extends ConsumerStatefulWidget {
  final Widget child;

  const ParkingNotificationMonitor({
    super.key,
    required this.child,
  });

  @override
  ConsumerState<ParkingNotificationMonitor> createState() =>
      _ParkingNotificationMonitorState();
}

class _ParkingNotificationMonitorState
    extends ConsumerState<ParkingNotificationMonitor> {
  Timer? _periodicTimer;

  @override
  void initState() {
    super.initState();
    _startPeriodicCheck();
  }

  @override
  void dispose() {
    _periodicTimer?.cancel();
    super.dispose();
  }

  void _startPeriodicCheck() {
    // Verifica a cada 5 minutos para garantir que notifica√ß√µes sejam agendadas
    _periodicTimer = Timer.periodic(const Duration(minutes: 5), (timer) {
      _checkAndScheduleNotifications();
    });
  }

  Future<void> _checkAndScheduleNotifications() async {
    final activeActivations = ref.read(activeActivationsProvider);
    final alarmSettings = ref.read(alarmSettingsProvider);

    if (mounted) {
      final notificationService = ref.read(parkingNotificationServiceProvider);
      await notificationService.checkAndScheduleNotifications(
          activeActivations, alarmSettings);
    }
  }

  @override
  Widget build(BuildContext context) {
    // Observa mudan√ßas nas ativa√ß√µes ativas
    final activeActivations = ref.watch(activeActivationsProvider);

    // Observa mudan√ßas nas configura√ß√µes de alarme
    final alarmSettings = ref.watch(alarmSettingsProvider);

    // Agenda notifica√ß√µes quando h√° mudan√ßas
    WidgetsBinding.instance.addPostFrameCallback((_) async {
      if (mounted) {
        final notificationService =
            ref.read(parkingNotificationServiceProvider);
        await notificationService.checkAndScheduleNotifications(
            activeActivations, alarmSettings);
      }
    });

    return widget.child;
  }
}
