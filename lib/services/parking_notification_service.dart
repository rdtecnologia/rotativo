import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../models/history_models.dart';
import '../providers/active_activations_provider.dart';
import '../providers/alarm_settings_provider.dart';
import 'local_notification_service.dart';
import 'dart:async';

/// Servi√ßo para gerenciar notifica√ß√µes de estacionamento
class ParkingNotificationService {
  static final ParkingNotificationService _instance =
      ParkingNotificationService._internal();
  factory ParkingNotificationService() => _instance;
  ParkingNotificationService._internal();

  final LocalNotificationService _localNotificationService =
      LocalNotificationService();

  /// Inicializa o servi√ßo
  Future<void> initialize() async {
    await _localNotificationService.initialize();
  }

  /// Agenda notifica√ß√µes para todas as ativa√ß√µes ativas
  Future<void> scheduleNotificationsForActiveActivations(
    Map<String, ActivationHistory> activations,
    AlarmSettings settings,
  ) async {
    if (!settings.localNotificationsEnabled) {
      debugPrint('üîî Notifica√ß√µes locais desabilitadas');
      return;
    }

    for (final entry in activations.entries) {
      final activation = entry.value;

      if (activation.isActive) {
        await _scheduleNotificationForActivation(activation, settings);
      }
    }
  }

  /// Agenda notifica√ß√£o para uma ativa√ß√£o espec√≠fica
  Future<void> _scheduleNotificationForActivation(
    ActivationHistory activation,
    AlarmSettings settings,
  ) async {
    if (!settings.parkingExpiration) {
      debugPrint(
          'üîî Notifica√ß√µes de vencimento desabilitadas para ${activation.licensePlate}');
      return;
    }

    // Calcula o hor√°rio de expira√ß√£o
    final expirationTime = activation.expiresAt ??
        activation.activatedAt.add(Duration(minutes: activation.parkingTime));

    // Verifica se a ativa√ß√£o ainda n√£o expirou
    if (expirationTime.isBefore(DateTime.now())) {
      debugPrint(
          'üîî Ativa√ß√£o ${activation.licensePlate} j√° expirou, n√£o agendando notifica√ß√£o');
      return;
    }

    // Verifica se o tempo de anteced√™ncia √© v√°lido
    final notificationTime =
        expirationTime.subtract(Duration(minutes: settings.reminderMinutes));
    if (notificationTime.isBefore(DateTime.now())) {
      debugPrint(
          'üîî Tempo de anteced√™ncia (${settings.reminderMinutes}min) j√° passou para ${activation.licensePlate}, n√£o agendando notifica√ß√£o');
      return;
    }

    // Agenda a notifica√ß√£o
    try {
      await _localNotificationService.scheduleParkingExpirationNotification(
        licensePlate: activation.licensePlate,
        expirationTime: expirationTime,
        reminderMinutes: settings.reminderMinutes,
        location: activation.location,
        soundEnabled: settings.soundEnabled,
        vibrationEnabled: settings.vibrationEnabled,
        lightsEnabled: settings.lightsEnabled,
      );

      debugPrint(
          '‚úÖ Notifica√ß√£o agendada com sucesso para ${activation.licensePlate} √†s ${expirationTime.toString()} (${settings.reminderMinutes}min antes)');
    } catch (e) {
      debugPrint(
          '‚ùå ERRO ao agendar notifica√ß√£o para ${activation.licensePlate}: $e');
      debugPrint(
          'üí° Detalhes: expirationTime=$expirationTime, reminderMinutes=${settings.reminderMinutes}');

      // Re-lan√ßa o erro para que possa ser tratado em n√≠vel superior se necess√°rio
      rethrow;
    }
  }

  /// Cancela notifica√ß√µes para um ve√≠culo espec√≠fico
  Future<void> cancelNotificationsForVehicle(String licensePlate) async {
    await _localNotificationService.cancelVehicleNotifications(licensePlate);
    debugPrint('üîî Notifica√ß√µes canceladas para $licensePlate');
  }

  /// Cancela todas as notifica√ß√µes de estacionamento
  Future<void> cancelAllParkingNotifications() async {
    await _localNotificationService.cancelAllNotifications();
    debugPrint('üîî Todas as notifica√ß√µes de estacionamento foram canceladas');
  }

  /// Cancela apenas notifica√ß√µes de estacionamento real, preserva testes
  Future<void> cancelOnlyParkingNotifications() async {
    await _localNotificationService.cancelOnlyParkingNotifications();
    debugPrint(
        'üîî Notifica√ß√µes de estacionamento real canceladas (testes preservados)');
  }

  /// Testa o agendamento de notifica√ß√µes com tempo espec√≠fico
  Future<void> testNotificationTiming({
    required String licensePlate,
    required int minutesFromNow,
    required int reminderMinutes,
  }) async {
    debugPrint(
        'üß™ Testando notifica√ß√£o para $licensePlate em $minutesFromNow minutos');

    final testExpirationTime =
        DateTime.now().add(Duration(minutes: minutesFromNow));

    await _localNotificationService.scheduleParkingExpirationNotification(
      licensePlate: licensePlate,
      expirationTime: testExpirationTime,
      reminderMinutes: reminderMinutes,
      location: 'Local de Teste',
      soundEnabled: true,
      vibrationEnabled: true,
      lightsEnabled: true,
    );

    debugPrint('üß™ Notifica√ß√£o de teste agendada:');
    debugPrint('  - Placa: $licensePlate');
    debugPrint('  - Expira em: ${testExpirationTime.toString()}');
    debugPrint('  - Notifica√ß√£o em: $reminderMinutes minutos antes');
    debugPrint(
        '  - Hor√°rio da notifica√ß√£o: ${testExpirationTime.subtract(Duration(minutes: reminderMinutes)).toString()}');

    // Listar notifica√ß√µes pendentes ap√≥s agendar
    await Future.delayed(const Duration(seconds: 1));
    await _localNotificationService.debugPendingNotifications();
  }

  /// Debug: Lista todas as notifica√ß√µes pendentes
  Future<void> debugAllPendingNotifications() async {
    await _localNotificationService.debugPendingNotifications();
  }

  /// Debug: Verifica o estado atual das ativa√ß√µes e configura√ß√µes
  Future<void> debugCurrentState(
    Map<String, ActivationHistory> activations,
    AlarmSettings settings,
  ) async {
    debugPrint('üîç === DEBUG ESTADO ATUAL ===');
    debugPrint('üìä Configura√ß√µes:');
    debugPrint(
        '  - Notifica√ß√µes locais: ${settings.localNotificationsEnabled}');
    debugPrint(
        '  - Vencimento de estacionamento: ${settings.parkingExpiration}');
    debugPrint('  - Minutos de anteced√™ncia: ${settings.reminderMinutes}');
    debugPrint('  - Som: ${settings.soundEnabled}');
    debugPrint('  - Vibra√ß√£o: ${settings.vibrationEnabled}');
    debugPrint('  - Luzes: ${settings.lightsEnabled}');

    debugPrint('üöó Ativa√ß√µes (${activations.length}):');
    for (final entry in activations.entries) {
      final activation = entry.value;
      final expirationTime = activation.expiresAt ??
          activation.activatedAt.add(Duration(minutes: activation.parkingTime));
      final notificationTime =
          expirationTime.subtract(Duration(minutes: settings.reminderMinutes));

      debugPrint('  - ${activation.licensePlate}:');
      debugPrint('    - Ativa: ${activation.isActive}');
      debugPrint('    - Expira em: $expirationTime');
      debugPrint('    - Notifica√ß√£o em: $notificationTime');
      debugPrint(
          '    - J√° expirou: ${expirationTime.isBefore(DateTime.now())}');
      debugPrint(
          '    - Notifica√ß√£o j√° passou: ${notificationTime.isBefore(DateTime.now())}');
    }

    debugPrint('üîç === FIM DEBUG ESTADO ===');
  }

  /// Atualiza notifica√ß√µes quando as configura√ß√µes mudam
  Future<void> updateNotificationsOnSettingsChange(
    Map<String, ActivationHistory> activations,
    AlarmSettings settings,
  ) async {
    debugPrint('üîÑ === REAGENDANDO POR MUDAN√áA DE CONFIGURA√á√ïES ===');
    debugPrint('üîÑ Configura√ß√µes atualizadas:');
    debugPrint('  - Anteced√™ncia: ${settings.reminderMinutes} minutos');
    debugPrint('  - Som: ${settings.soundEnabled}');
    debugPrint('  - Vibra√ß√£o: ${settings.vibrationEnabled}');
    debugPrint('  - Luzes: ${settings.lightsEnabled}');

    // ‚úÖ CORRE√á√ÉO: Cancela apenas notifica√ß√µes de estacionamento real, preserva testes
    await cancelOnlyParkingNotifications();

    // Agenda novas notifica√ß√µes com as configura√ß√µes atualizadas
    await scheduleNotificationsForActiveActivations(activations, settings);

    debugPrint('üîÑ === FIM REAGENDAMENTO ===');
  }

  /// For√ßa reagendamento imediato (√∫til para testes)
  Future<void> forceRescheduleNotifications() async {
    debugPrint('üîÑ === FOR√áANDO REAGENDAMENTO IMEDIATO ===');
    // Este m√©todo pode ser chamado da UI para for√ßar reagendamento
    // Ser√° implementado no provider se necess√°rio
  }

  /// Verifica se h√° ativa√ß√µes pr√≥ximas de expirar e agenda notifica√ß√µes
  Future<void> checkAndScheduleNotifications(
    Map<String, ActivationHistory> activations,
    AlarmSettings settings,
  ) async {
    if (!settings.localNotificationsEnabled || !settings.parkingExpiration) {
      debugPrint('üîî Notifica√ß√µes desabilitadas ou configura√ß√µes inv√°lidas');
      return;
    }

    debugPrint(
        'üîî Verificando ${activations.length} ativa√ß√µes para agendar notifica√ß√µes');

    // ‚úÖ CORRE√á√ÉO: Cancela apenas notifica√ß√µes de estacionamento real, preserva testes
    await cancelOnlyParkingNotifications();

    for (final entry in activations.entries) {
      final activation = entry.value;

      if (!activation.isActive) {
        debugPrint(
            'üîî Ativa√ß√£o ${activation.licensePlate} n√£o est√° ativa, pulando...');
        continue;
      }

      // Calcula o hor√°rio de expira√ß√£o
      final expirationTime = activation.expiresAt ??
          activation.activatedAt.add(Duration(minutes: activation.parkingTime));

      // S√≥ agenda notifica√ß√£o se ainda n√£o expirou
      if (expirationTime.isAfter(DateTime.now())) {
        try {
          await _scheduleNotificationForActivation(activation, settings);
        } catch (e) {
          debugPrint(
              '‚ùå ERRO CR√çTICO ao agendar notifica√ß√£o para ${activation.licensePlate}: $e');
        }
      } else {
        debugPrint(
            'üîî Ativa√ß√£o ${activation.licensePlate} j√° expirou, n√£o agendando notifica√ß√£o');
      }
    }

    // Debug: Listar todas as notifica√ß√µes pendentes ap√≥s processamento
    debugPrint('üîî === RESUMO FINAL ===');
    await _localNotificationService.debugPendingNotifications();
  }
}

/// Provider para o servi√ßo de notifica√ß√µes de estacionamento
final parkingNotificationServiceProvider =
    Provider<ParkingNotificationService>((ref) {
  return ParkingNotificationService();
});

/// Widget para monitorar ativa√ß√µes e agendar notifica√ß√µes automaticamente
class ParkingNotificationMonitor extends ConsumerStatefulWidget {
  final Widget child;

  const ParkingNotificationMonitor({
    super.key,
    required this.child,
  });

  @override
  ConsumerState<ParkingNotificationMonitor> createState() =>
      _ParkingNotificationMonitorState();
}

class _ParkingNotificationMonitorState
    extends ConsumerState<ParkingNotificationMonitor> {
  Timer? _periodicTimer;
  Map<String, ActivationHistory>? _lastScheduledActivations;
  AlarmSettings? _lastScheduledSettings;

  @override
  void initState() {
    super.initState();
    _startPeriodicCheck();
  }

  @override
  void dispose() {
    _periodicTimer?.cancel();
    super.dispose();
  }

  void _startPeriodicCheck() {
    // Verifica a cada 5 minutos como backup do sistema principal
    // O TimeUpdateNotifier j√° faz verifica√ß√£o a cada minuto
    _periodicTimer = Timer.periodic(const Duration(minutes: 5), (timer) {
      _checkAndScheduleNotifications();
    });
  }

  Future<void> _checkAndScheduleNotifications() async {
    try {
      if (!mounted) return;

      final activeActivations = ref.read(activeActivationsProvider);
      final alarmSettings = ref.read(alarmSettingsProvider);

      debugPrint(
          'üîî Timer peri√≥dico (backup): Aplicando configura√ß√µes atuais...');
      final notificationService = ref.read(parkingNotificationServiceProvider);
      await notificationService.checkAndScheduleNotifications(
          activeActivations, alarmSettings);

      // Atualiza o estado para refletir as configura√ß√µes aplicadas
      _lastScheduledActivations = Map.from(activeActivations);
      _lastScheduledSettings = alarmSettings;
    } catch (e, stackTrace) {
      debugPrint('‚ùå Erro no timer peri√≥dico de backup: $e');
      debugPrint('üìç Stack trace: $stackTrace');
      // N√£o relan√ßa o erro para n√£o quebrar o timer
    }
  }

  /// Verifica se as ativa√ß√µes ou configura√ß√µes mudaram significativamente
  bool _hasSignificantChanges(
    Map<String, ActivationHistory> currentActivations,
    AlarmSettings currentSettings,
  ) {
    // Se √© a primeira vez, sempre agenda
    if (_lastScheduledActivations == null || _lastScheduledSettings == null) {
      return true;
    }

    // Verifica se o n√∫mero de ativa√ß√µes mudou
    if (currentActivations.length != _lastScheduledActivations!.length) {
      return true;
    }

    // ‚úÖ CORRE√á√ÉO: Reagir a mudan√ßas cr√≠ticas de configura√ß√£o
    // Verifica se as notifica√ß√µes foram desabilitadas
    if (!currentSettings.localNotificationsEnabled ||
        !currentSettings.parkingExpiration) {
      // Se as notifica√ß√µes foram desabilitadas, cancela todas
      return true;
    }

    // ‚úÖ NOVA FUNCIONALIDADE: Reagir a mudan√ßas no tempo de anteced√™ncia
    if (_lastScheduledSettings!.reminderMinutes !=
        currentSettings.reminderMinutes) {
      debugPrint(
          'üîî Mudan√ßa detectada no tempo de anteced√™ncia: ${_lastScheduledSettings!.reminderMinutes}min ‚Üí ${currentSettings.reminderMinutes}min');
      return true;
    }

    // Reagir a mudan√ßas em configura√ß√µes de som/vibra√ß√£o/luzes
    if (_lastScheduledSettings!.soundEnabled != currentSettings.soundEnabled ||
        _lastScheduledSettings!.vibrationEnabled !=
            currentSettings.vibrationEnabled ||
        _lastScheduledSettings!.lightsEnabled !=
            currentSettings.lightsEnabled) {
      debugPrint(
          'üîî Mudan√ßa detectada nas configura√ß√µes de som/vibra√ß√£o/luzes');
      return true;
    }

    // Verifica se alguma ativa√ß√£o mudou de estado ou tempo
    for (final entry in currentActivations.entries) {
      final current = entry.value;
      final last = _lastScheduledActivations![entry.key];

      if (last == null ||
          current.isActive != last.isActive ||
          current.expiresAt != last.expiresAt ||
          current.parkingTime != last.parkingTime) {
        return true;
      }
    }

    return false;
  }

  @override
  Widget build(BuildContext context) {
    // Observa mudan√ßas nas ativa√ß√µes ativas
    final activeActivations = ref.watch(activeActivationsProvider);

    // Observa mudan√ßas nas configura√ß√µes de alarme
    final alarmSettings = ref.watch(alarmSettingsProvider);

    // ‚úÖ Agenda notifica√ß√µes quando h√° mudan√ßas significativas nas ATIVA√á√ïES ou CONFIGURA√á√ïES
    WidgetsBinding.instance.addPostFrameCallback((_) async {
      try {
        if (mounted &&
            _hasSignificantChanges(activeActivations, alarmSettings)) {
          debugPrint(
              'üîî Mudan√ßas significativas detectadas, reagendando notifica√ß√µes...');

          final notificationService =
              ref.read(parkingNotificationServiceProvider);
          await notificationService.checkAndScheduleNotifications(
              activeActivations, alarmSettings);

          // Atualiza o estado para evitar agendamento duplicado
          _lastScheduledActivations = Map.from(activeActivations);
          _lastScheduledSettings = alarmSettings;
        }
      } catch (e, stackTrace) {
        debugPrint('‚ùå Erro no callback de mudan√ßas: $e');
        debugPrint('üìç Stack trace: $stackTrace');
        // N√£o relan√ßa o erro para n√£o quebrar a UI
      }
    });

    return widget.child;
  }
}
